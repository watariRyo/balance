// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: income_and_expenditure.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IncomeAndExpenditureServiceClient is the client API for IncomeAndExpenditureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IncomeAndExpenditureServiceClient interface {
	ListIncomeAndExpenditure(ctx context.Context, in *ListIncomeAndExpenditureRequest, opts ...grpc.CallOption) (*ListIncomeAndExpenditureResponse, error)
	GetIncomeAndExpenditure(ctx context.Context, in *GetIncomeAndExpenditureRequest, opts ...grpc.CallOption) (*GetIncomeAndExpenditureResponse, error)
	RegisterIncomeAndExpenditure(ctx context.Context, in *RegisterIncomeAndExpenditureRequest, opts ...grpc.CallOption) (*RegisterIncomeAndExpenditureResponse, error)
	UpdateIncomeAndExpenditure(ctx context.Context, in *UpdateIncomeAndExpenditureRequest, opts ...grpc.CallOption) (*UpdateIncomeAndExpenditureResponse, error)
	DeleteIncomeAndExpenditure(ctx context.Context, in *DeleteIncomeAndExpenditureRequest, opts ...grpc.CallOption) (*DeleteIncomeAndExpenditureResponse, error)
}

type incomeAndExpenditureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIncomeAndExpenditureServiceClient(cc grpc.ClientConnInterface) IncomeAndExpenditureServiceClient {
	return &incomeAndExpenditureServiceClient{cc}
}

func (c *incomeAndExpenditureServiceClient) ListIncomeAndExpenditure(ctx context.Context, in *ListIncomeAndExpenditureRequest, opts ...grpc.CallOption) (*ListIncomeAndExpenditureResponse, error) {
	out := new(ListIncomeAndExpenditureResponse)
	err := c.cc.Invoke(ctx, "/proto.IncomeAndExpenditureService/ListIncomeAndExpenditure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incomeAndExpenditureServiceClient) GetIncomeAndExpenditure(ctx context.Context, in *GetIncomeAndExpenditureRequest, opts ...grpc.CallOption) (*GetIncomeAndExpenditureResponse, error) {
	out := new(GetIncomeAndExpenditureResponse)
	err := c.cc.Invoke(ctx, "/proto.IncomeAndExpenditureService/GetIncomeAndExpenditure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incomeAndExpenditureServiceClient) RegisterIncomeAndExpenditure(ctx context.Context, in *RegisterIncomeAndExpenditureRequest, opts ...grpc.CallOption) (*RegisterIncomeAndExpenditureResponse, error) {
	out := new(RegisterIncomeAndExpenditureResponse)
	err := c.cc.Invoke(ctx, "/proto.IncomeAndExpenditureService/RegisterIncomeAndExpenditure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incomeAndExpenditureServiceClient) UpdateIncomeAndExpenditure(ctx context.Context, in *UpdateIncomeAndExpenditureRequest, opts ...grpc.CallOption) (*UpdateIncomeAndExpenditureResponse, error) {
	out := new(UpdateIncomeAndExpenditureResponse)
	err := c.cc.Invoke(ctx, "/proto.IncomeAndExpenditureService/UpdateIncomeAndExpenditure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incomeAndExpenditureServiceClient) DeleteIncomeAndExpenditure(ctx context.Context, in *DeleteIncomeAndExpenditureRequest, opts ...grpc.CallOption) (*DeleteIncomeAndExpenditureResponse, error) {
	out := new(DeleteIncomeAndExpenditureResponse)
	err := c.cc.Invoke(ctx, "/proto.IncomeAndExpenditureService/DeleteIncomeAndExpenditure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IncomeAndExpenditureServiceServer is the server API for IncomeAndExpenditureService service.
// All implementations must embed UnimplementedIncomeAndExpenditureServiceServer
// for forward compatibility
type IncomeAndExpenditureServiceServer interface {
	ListIncomeAndExpenditure(context.Context, *ListIncomeAndExpenditureRequest) (*ListIncomeAndExpenditureResponse, error)
	GetIncomeAndExpenditure(context.Context, *GetIncomeAndExpenditureRequest) (*GetIncomeAndExpenditureResponse, error)
	RegisterIncomeAndExpenditure(context.Context, *RegisterIncomeAndExpenditureRequest) (*RegisterIncomeAndExpenditureResponse, error)
	UpdateIncomeAndExpenditure(context.Context, *UpdateIncomeAndExpenditureRequest) (*UpdateIncomeAndExpenditureResponse, error)
	DeleteIncomeAndExpenditure(context.Context, *DeleteIncomeAndExpenditureRequest) (*DeleteIncomeAndExpenditureResponse, error)
	mustEmbedUnimplementedIncomeAndExpenditureServiceServer()
}

// UnimplementedIncomeAndExpenditureServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIncomeAndExpenditureServiceServer struct {
}

func (UnimplementedIncomeAndExpenditureServiceServer) ListIncomeAndExpenditure(context.Context, *ListIncomeAndExpenditureRequest) (*ListIncomeAndExpenditureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIncomeAndExpenditure not implemented")
}
func (UnimplementedIncomeAndExpenditureServiceServer) GetIncomeAndExpenditure(context.Context, *GetIncomeAndExpenditureRequest) (*GetIncomeAndExpenditureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncomeAndExpenditure not implemented")
}
func (UnimplementedIncomeAndExpenditureServiceServer) RegisterIncomeAndExpenditure(context.Context, *RegisterIncomeAndExpenditureRequest) (*RegisterIncomeAndExpenditureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterIncomeAndExpenditure not implemented")
}
func (UnimplementedIncomeAndExpenditureServiceServer) UpdateIncomeAndExpenditure(context.Context, *UpdateIncomeAndExpenditureRequest) (*UpdateIncomeAndExpenditureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIncomeAndExpenditure not implemented")
}
func (UnimplementedIncomeAndExpenditureServiceServer) DeleteIncomeAndExpenditure(context.Context, *DeleteIncomeAndExpenditureRequest) (*DeleteIncomeAndExpenditureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIncomeAndExpenditure not implemented")
}
func (UnimplementedIncomeAndExpenditureServiceServer) mustEmbedUnimplementedIncomeAndExpenditureServiceServer() {
}

// UnsafeIncomeAndExpenditureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IncomeAndExpenditureServiceServer will
// result in compilation errors.
type UnsafeIncomeAndExpenditureServiceServer interface {
	mustEmbedUnimplementedIncomeAndExpenditureServiceServer()
}

func RegisterIncomeAndExpenditureServiceServer(s grpc.ServiceRegistrar, srv IncomeAndExpenditureServiceServer) {
	s.RegisterService(&IncomeAndExpenditureService_ServiceDesc, srv)
}

func _IncomeAndExpenditureService_ListIncomeAndExpenditure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIncomeAndExpenditureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncomeAndExpenditureServiceServer).ListIncomeAndExpenditure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IncomeAndExpenditureService/ListIncomeAndExpenditure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncomeAndExpenditureServiceServer).ListIncomeAndExpenditure(ctx, req.(*ListIncomeAndExpenditureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncomeAndExpenditureService_GetIncomeAndExpenditure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIncomeAndExpenditureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncomeAndExpenditureServiceServer).GetIncomeAndExpenditure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IncomeAndExpenditureService/GetIncomeAndExpenditure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncomeAndExpenditureServiceServer).GetIncomeAndExpenditure(ctx, req.(*GetIncomeAndExpenditureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncomeAndExpenditureService_RegisterIncomeAndExpenditure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterIncomeAndExpenditureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncomeAndExpenditureServiceServer).RegisterIncomeAndExpenditure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IncomeAndExpenditureService/RegisterIncomeAndExpenditure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncomeAndExpenditureServiceServer).RegisterIncomeAndExpenditure(ctx, req.(*RegisterIncomeAndExpenditureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncomeAndExpenditureService_UpdateIncomeAndExpenditure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIncomeAndExpenditureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncomeAndExpenditureServiceServer).UpdateIncomeAndExpenditure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IncomeAndExpenditureService/UpdateIncomeAndExpenditure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncomeAndExpenditureServiceServer).UpdateIncomeAndExpenditure(ctx, req.(*UpdateIncomeAndExpenditureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncomeAndExpenditureService_DeleteIncomeAndExpenditure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIncomeAndExpenditureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncomeAndExpenditureServiceServer).DeleteIncomeAndExpenditure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IncomeAndExpenditureService/DeleteIncomeAndExpenditure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncomeAndExpenditureServiceServer).DeleteIncomeAndExpenditure(ctx, req.(*DeleteIncomeAndExpenditureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IncomeAndExpenditureService_ServiceDesc is the grpc.ServiceDesc for IncomeAndExpenditureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IncomeAndExpenditureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.IncomeAndExpenditureService",
	HandlerType: (*IncomeAndExpenditureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListIncomeAndExpenditure",
			Handler:    _IncomeAndExpenditureService_ListIncomeAndExpenditure_Handler,
		},
		{
			MethodName: "GetIncomeAndExpenditure",
			Handler:    _IncomeAndExpenditureService_GetIncomeAndExpenditure_Handler,
		},
		{
			MethodName: "RegisterIncomeAndExpenditure",
			Handler:    _IncomeAndExpenditureService_RegisterIncomeAndExpenditure_Handler,
		},
		{
			MethodName: "UpdateIncomeAndExpenditure",
			Handler:    _IncomeAndExpenditureService_UpdateIncomeAndExpenditure_Handler,
		},
		{
			MethodName: "DeleteIncomeAndExpenditure",
			Handler:    _IncomeAndExpenditureService_DeleteIncomeAndExpenditure_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "income_and_expenditure.proto",
}
