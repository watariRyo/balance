// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: user.proto

package protoconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	proto "github.com/watariRyo/balance/server/proto"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "proto.UserService"
)

// UserServiceClient is a client for the proto.UserService service.
type UserServiceClient interface {
	GetUser(context.Context, *connect_go.Request[proto.GetUserRequest]) (*connect_go.Response[proto.GetUserResponse], error)
	RegisterUser(context.Context, *connect_go.Request[proto.RegisterUserRequest]) (*connect_go.Response[proto.RegisterUserResponse], error)
	UpdateUser(context.Context, *connect_go.Request[proto.UpdateUserRequest]) (*connect_go.Response[proto.UpdateUserResponse], error)
	DeleteUser(context.Context, *connect_go.Request[proto.DeleteUserRequest]) (*connect_go.Response[proto.DeleteUserResponse], error)
	LoginUser(context.Context, *connect_go.Request[proto.LoginUserRequest]) (*connect_go.Response[proto.LoginUserResponse], error)
	LogoutUser(context.Context, *connect_go.Request[proto.LogoutUserRequest]) (*connect_go.Response[proto.LogoutUserResponse], error)
}

// NewUserServiceClient constructs a client for the proto.UserService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userServiceClient{
		getUser: connect_go.NewClient[proto.GetUserRequest, proto.GetUserResponse](
			httpClient,
			baseURL+"/proto.UserService/GetUser",
			opts...,
		),
		registerUser: connect_go.NewClient[proto.RegisterUserRequest, proto.RegisterUserResponse](
			httpClient,
			baseURL+"/proto.UserService/RegisterUser",
			opts...,
		),
		updateUser: connect_go.NewClient[proto.UpdateUserRequest, proto.UpdateUserResponse](
			httpClient,
			baseURL+"/proto.UserService/UpdateUser",
			opts...,
		),
		deleteUser: connect_go.NewClient[proto.DeleteUserRequest, proto.DeleteUserResponse](
			httpClient,
			baseURL+"/proto.UserService/DeleteUser",
			opts...,
		),
		loginUser: connect_go.NewClient[proto.LoginUserRequest, proto.LoginUserResponse](
			httpClient,
			baseURL+"/proto.UserService/LoginUser",
			opts...,
		),
		logoutUser: connect_go.NewClient[proto.LogoutUserRequest, proto.LogoutUserResponse](
			httpClient,
			baseURL+"/proto.UserService/LogoutUser",
			opts...,
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	getUser      *connect_go.Client[proto.GetUserRequest, proto.GetUserResponse]
	registerUser *connect_go.Client[proto.RegisterUserRequest, proto.RegisterUserResponse]
	updateUser   *connect_go.Client[proto.UpdateUserRequest, proto.UpdateUserResponse]
	deleteUser   *connect_go.Client[proto.DeleteUserRequest, proto.DeleteUserResponse]
	loginUser    *connect_go.Client[proto.LoginUserRequest, proto.LoginUserResponse]
	logoutUser   *connect_go.Client[proto.LogoutUserRequest, proto.LogoutUserResponse]
}

// GetUser calls proto.UserService.GetUser.
func (c *userServiceClient) GetUser(ctx context.Context, req *connect_go.Request[proto.GetUserRequest]) (*connect_go.Response[proto.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// RegisterUser calls proto.UserService.RegisterUser.
func (c *userServiceClient) RegisterUser(ctx context.Context, req *connect_go.Request[proto.RegisterUserRequest]) (*connect_go.Response[proto.RegisterUserResponse], error) {
	return c.registerUser.CallUnary(ctx, req)
}

// UpdateUser calls proto.UserService.UpdateUser.
func (c *userServiceClient) UpdateUser(ctx context.Context, req *connect_go.Request[proto.UpdateUserRequest]) (*connect_go.Response[proto.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// DeleteUser calls proto.UserService.DeleteUser.
func (c *userServiceClient) DeleteUser(ctx context.Context, req *connect_go.Request[proto.DeleteUserRequest]) (*connect_go.Response[proto.DeleteUserResponse], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// LoginUser calls proto.UserService.LoginUser.
func (c *userServiceClient) LoginUser(ctx context.Context, req *connect_go.Request[proto.LoginUserRequest]) (*connect_go.Response[proto.LoginUserResponse], error) {
	return c.loginUser.CallUnary(ctx, req)
}

// LogoutUser calls proto.UserService.LogoutUser.
func (c *userServiceClient) LogoutUser(ctx context.Context, req *connect_go.Request[proto.LogoutUserRequest]) (*connect_go.Response[proto.LogoutUserResponse], error) {
	return c.logoutUser.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the proto.UserService service.
type UserServiceHandler interface {
	GetUser(context.Context, *connect_go.Request[proto.GetUserRequest]) (*connect_go.Response[proto.GetUserResponse], error)
	RegisterUser(context.Context, *connect_go.Request[proto.RegisterUserRequest]) (*connect_go.Response[proto.RegisterUserResponse], error)
	UpdateUser(context.Context, *connect_go.Request[proto.UpdateUserRequest]) (*connect_go.Response[proto.UpdateUserResponse], error)
	DeleteUser(context.Context, *connect_go.Request[proto.DeleteUserRequest]) (*connect_go.Response[proto.DeleteUserResponse], error)
	LoginUser(context.Context, *connect_go.Request[proto.LoginUserRequest]) (*connect_go.Response[proto.LoginUserResponse], error)
	LogoutUser(context.Context, *connect_go.Request[proto.LogoutUserRequest]) (*connect_go.Response[proto.LogoutUserResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/proto.UserService/GetUser", connect_go.NewUnaryHandler(
		"/proto.UserService/GetUser",
		svc.GetUser,
		opts...,
	))
	mux.Handle("/proto.UserService/RegisterUser", connect_go.NewUnaryHandler(
		"/proto.UserService/RegisterUser",
		svc.RegisterUser,
		opts...,
	))
	mux.Handle("/proto.UserService/UpdateUser", connect_go.NewUnaryHandler(
		"/proto.UserService/UpdateUser",
		svc.UpdateUser,
		opts...,
	))
	mux.Handle("/proto.UserService/DeleteUser", connect_go.NewUnaryHandler(
		"/proto.UserService/DeleteUser",
		svc.DeleteUser,
		opts...,
	))
	mux.Handle("/proto.UserService/LoginUser", connect_go.NewUnaryHandler(
		"/proto.UserService/LoginUser",
		svc.LoginUser,
		opts...,
	))
	mux.Handle("/proto.UserService/LogoutUser", connect_go.NewUnaryHandler(
		"/proto.UserService/LogoutUser",
		svc.LogoutUser,
		opts...,
	))
	return "/proto.UserService/", mux
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) GetUser(context.Context, *connect_go.Request[proto.GetUserRequest]) (*connect_go.Response[proto.GetUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.UserService.GetUser is not implemented"))
}

func (UnimplementedUserServiceHandler) RegisterUser(context.Context, *connect_go.Request[proto.RegisterUserRequest]) (*connect_go.Response[proto.RegisterUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.UserService.RegisterUser is not implemented"))
}

func (UnimplementedUserServiceHandler) UpdateUser(context.Context, *connect_go.Request[proto.UpdateUserRequest]) (*connect_go.Response[proto.UpdateUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.UserService.UpdateUser is not implemented"))
}

func (UnimplementedUserServiceHandler) DeleteUser(context.Context, *connect_go.Request[proto.DeleteUserRequest]) (*connect_go.Response[proto.DeleteUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.UserService.DeleteUser is not implemented"))
}

func (UnimplementedUserServiceHandler) LoginUser(context.Context, *connect_go.Request[proto.LoginUserRequest]) (*connect_go.Response[proto.LoginUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.UserService.LoginUser is not implemented"))
}

func (UnimplementedUserServiceHandler) LogoutUser(context.Context, *connect_go.Request[proto.LogoutUserRequest]) (*connect_go.Response[proto.LogoutUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.UserService.LogoutUser is not implemented"))
}
