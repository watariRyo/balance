// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: user_tag.proto

package protoconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	proto "github.com/watariRyo/balance/server/proto"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// UserTagServiceName is the fully-qualified name of the UserTagService service.
	UserTagServiceName = "proto.UserTagService"
)

// UserTagServiceClient is a client for the proto.UserTagService service.
type UserTagServiceClient interface {
	ListUserTag(context.Context, *connect_go.Request[proto.ListUserTagRequest]) (*connect_go.Response[proto.ListUserTagResponse], error)
	GetUserTag(context.Context, *connect_go.Request[proto.GetUserTagRequest]) (*connect_go.Response[proto.GetUserTagResponse], error)
	RegisterUserTag(context.Context, *connect_go.Request[proto.RegisterUserTagRequest]) (*connect_go.Response[proto.RegisterUserTagResponse], error)
	UpdateUserTag(context.Context, *connect_go.Request[proto.UpdateUserTagRequest]) (*connect_go.Response[proto.UpdateUserTagResponse], error)
	DeleteUserTag(context.Context, *connect_go.Request[proto.DeleteUserTagRequest]) (*connect_go.Response[proto.DeleteUserTagResponse], error)
}

// NewUserTagServiceClient constructs a client for the proto.UserTagService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserTagServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) UserTagServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userTagServiceClient{
		listUserTag: connect_go.NewClient[proto.ListUserTagRequest, proto.ListUserTagResponse](
			httpClient,
			baseURL+"/proto.UserTagService/ListUserTag",
			opts...,
		),
		getUserTag: connect_go.NewClient[proto.GetUserTagRequest, proto.GetUserTagResponse](
			httpClient,
			baseURL+"/proto.UserTagService/GetUserTag",
			opts...,
		),
		registerUserTag: connect_go.NewClient[proto.RegisterUserTagRequest, proto.RegisterUserTagResponse](
			httpClient,
			baseURL+"/proto.UserTagService/RegisterUserTag",
			opts...,
		),
		updateUserTag: connect_go.NewClient[proto.UpdateUserTagRequest, proto.UpdateUserTagResponse](
			httpClient,
			baseURL+"/proto.UserTagService/UpdateUserTag",
			opts...,
		),
		deleteUserTag: connect_go.NewClient[proto.DeleteUserTagRequest, proto.DeleteUserTagResponse](
			httpClient,
			baseURL+"/proto.UserTagService/DeleteUserTag",
			opts...,
		),
	}
}

// userTagServiceClient implements UserTagServiceClient.
type userTagServiceClient struct {
	listUserTag     *connect_go.Client[proto.ListUserTagRequest, proto.ListUserTagResponse]
	getUserTag      *connect_go.Client[proto.GetUserTagRequest, proto.GetUserTagResponse]
	registerUserTag *connect_go.Client[proto.RegisterUserTagRequest, proto.RegisterUserTagResponse]
	updateUserTag   *connect_go.Client[proto.UpdateUserTagRequest, proto.UpdateUserTagResponse]
	deleteUserTag   *connect_go.Client[proto.DeleteUserTagRequest, proto.DeleteUserTagResponse]
}

// ListUserTag calls proto.UserTagService.ListUserTag.
func (c *userTagServiceClient) ListUserTag(ctx context.Context, req *connect_go.Request[proto.ListUserTagRequest]) (*connect_go.Response[proto.ListUserTagResponse], error) {
	return c.listUserTag.CallUnary(ctx, req)
}

// GetUserTag calls proto.UserTagService.GetUserTag.
func (c *userTagServiceClient) GetUserTag(ctx context.Context, req *connect_go.Request[proto.GetUserTagRequest]) (*connect_go.Response[proto.GetUserTagResponse], error) {
	return c.getUserTag.CallUnary(ctx, req)
}

// RegisterUserTag calls proto.UserTagService.RegisterUserTag.
func (c *userTagServiceClient) RegisterUserTag(ctx context.Context, req *connect_go.Request[proto.RegisterUserTagRequest]) (*connect_go.Response[proto.RegisterUserTagResponse], error) {
	return c.registerUserTag.CallUnary(ctx, req)
}

// UpdateUserTag calls proto.UserTagService.UpdateUserTag.
func (c *userTagServiceClient) UpdateUserTag(ctx context.Context, req *connect_go.Request[proto.UpdateUserTagRequest]) (*connect_go.Response[proto.UpdateUserTagResponse], error) {
	return c.updateUserTag.CallUnary(ctx, req)
}

// DeleteUserTag calls proto.UserTagService.DeleteUserTag.
func (c *userTagServiceClient) DeleteUserTag(ctx context.Context, req *connect_go.Request[proto.DeleteUserTagRequest]) (*connect_go.Response[proto.DeleteUserTagResponse], error) {
	return c.deleteUserTag.CallUnary(ctx, req)
}

// UserTagServiceHandler is an implementation of the proto.UserTagService service.
type UserTagServiceHandler interface {
	ListUserTag(context.Context, *connect_go.Request[proto.ListUserTagRequest]) (*connect_go.Response[proto.ListUserTagResponse], error)
	GetUserTag(context.Context, *connect_go.Request[proto.GetUserTagRequest]) (*connect_go.Response[proto.GetUserTagResponse], error)
	RegisterUserTag(context.Context, *connect_go.Request[proto.RegisterUserTagRequest]) (*connect_go.Response[proto.RegisterUserTagResponse], error)
	UpdateUserTag(context.Context, *connect_go.Request[proto.UpdateUserTagRequest]) (*connect_go.Response[proto.UpdateUserTagResponse], error)
	DeleteUserTag(context.Context, *connect_go.Request[proto.DeleteUserTagRequest]) (*connect_go.Response[proto.DeleteUserTagResponse], error)
}

// NewUserTagServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserTagServiceHandler(svc UserTagServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/proto.UserTagService/ListUserTag", connect_go.NewUnaryHandler(
		"/proto.UserTagService/ListUserTag",
		svc.ListUserTag,
		opts...,
	))
	mux.Handle("/proto.UserTagService/GetUserTag", connect_go.NewUnaryHandler(
		"/proto.UserTagService/GetUserTag",
		svc.GetUserTag,
		opts...,
	))
	mux.Handle("/proto.UserTagService/RegisterUserTag", connect_go.NewUnaryHandler(
		"/proto.UserTagService/RegisterUserTag",
		svc.RegisterUserTag,
		opts...,
	))
	mux.Handle("/proto.UserTagService/UpdateUserTag", connect_go.NewUnaryHandler(
		"/proto.UserTagService/UpdateUserTag",
		svc.UpdateUserTag,
		opts...,
	))
	mux.Handle("/proto.UserTagService/DeleteUserTag", connect_go.NewUnaryHandler(
		"/proto.UserTagService/DeleteUserTag",
		svc.DeleteUserTag,
		opts...,
	))
	return "/proto.UserTagService/", mux
}

// UnimplementedUserTagServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserTagServiceHandler struct{}

func (UnimplementedUserTagServiceHandler) ListUserTag(context.Context, *connect_go.Request[proto.ListUserTagRequest]) (*connect_go.Response[proto.ListUserTagResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.UserTagService.ListUserTag is not implemented"))
}

func (UnimplementedUserTagServiceHandler) GetUserTag(context.Context, *connect_go.Request[proto.GetUserTagRequest]) (*connect_go.Response[proto.GetUserTagResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.UserTagService.GetUserTag is not implemented"))
}

func (UnimplementedUserTagServiceHandler) RegisterUserTag(context.Context, *connect_go.Request[proto.RegisterUserTagRequest]) (*connect_go.Response[proto.RegisterUserTagResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.UserTagService.RegisterUserTag is not implemented"))
}

func (UnimplementedUserTagServiceHandler) UpdateUserTag(context.Context, *connect_go.Request[proto.UpdateUserTagRequest]) (*connect_go.Response[proto.UpdateUserTagResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.UserTagService.UpdateUserTag is not implemented"))
}

func (UnimplementedUserTagServiceHandler) DeleteUserTag(context.Context, *connect_go.Request[proto.DeleteUserTagRequest]) (*connect_go.Response[proto.DeleteUserTagResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.UserTagService.DeleteUserTag is not implemented"))
}
