// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: income_and_expenditure.proto

package protoconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	proto "github.com/watariRyo/balance/server/proto"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// IncomeAndExpenditureServiceName is the fully-qualified name of the IncomeAndExpenditureService
	// service.
	IncomeAndExpenditureServiceName = "proto.IncomeAndExpenditureService"
)

// IncomeAndExpenditureServiceClient is a client for the proto.IncomeAndExpenditureService service.
type IncomeAndExpenditureServiceClient interface {
	ListIncomeAndExpenditure(context.Context, *connect_go.Request[proto.ListIncomeAndExpenditureRequest]) (*connect_go.Response[proto.ListIncomeAndExpenditureResponse], error)
	GetIncomeAndExpenditure(context.Context, *connect_go.Request[proto.GetIncomeAndExpenditureRequest]) (*connect_go.Response[proto.GetIncomeAndExpenditureResponse], error)
	RegisterIncomeAndExpenditure(context.Context, *connect_go.Request[proto.RegisterIncomeAndExpenditureRequest]) (*connect_go.Response[proto.RegisterIncomeAndExpenditureResponse], error)
	UpdateIncomeAndExpenditure(context.Context, *connect_go.Request[proto.UpdateIncomeAndExpenditureRequest]) (*connect_go.Response[proto.UpdateIncomeAndExpenditureResponse], error)
	DeleteIncomeAndExpenditure(context.Context, *connect_go.Request[proto.DeleteIncomeAndExpenditureRequest]) (*connect_go.Response[proto.DeleteIncomeAndExpenditureResponse], error)
}

// NewIncomeAndExpenditureServiceClient constructs a client for the
// proto.IncomeAndExpenditureService service. By default, it uses the Connect protocol with the
// binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use the
// gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIncomeAndExpenditureServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) IncomeAndExpenditureServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &incomeAndExpenditureServiceClient{
		listIncomeAndExpenditure: connect_go.NewClient[proto.ListIncomeAndExpenditureRequest, proto.ListIncomeAndExpenditureResponse](
			httpClient,
			baseURL+"/proto.IncomeAndExpenditureService/ListIncomeAndExpenditure",
			opts...,
		),
		getIncomeAndExpenditure: connect_go.NewClient[proto.GetIncomeAndExpenditureRequest, proto.GetIncomeAndExpenditureResponse](
			httpClient,
			baseURL+"/proto.IncomeAndExpenditureService/GetIncomeAndExpenditure",
			opts...,
		),
		registerIncomeAndExpenditure: connect_go.NewClient[proto.RegisterIncomeAndExpenditureRequest, proto.RegisterIncomeAndExpenditureResponse](
			httpClient,
			baseURL+"/proto.IncomeAndExpenditureService/RegisterIncomeAndExpenditure",
			opts...,
		),
		updateIncomeAndExpenditure: connect_go.NewClient[proto.UpdateIncomeAndExpenditureRequest, proto.UpdateIncomeAndExpenditureResponse](
			httpClient,
			baseURL+"/proto.IncomeAndExpenditureService/UpdateIncomeAndExpenditure",
			opts...,
		),
		deleteIncomeAndExpenditure: connect_go.NewClient[proto.DeleteIncomeAndExpenditureRequest, proto.DeleteIncomeAndExpenditureResponse](
			httpClient,
			baseURL+"/proto.IncomeAndExpenditureService/DeleteIncomeAndExpenditure",
			opts...,
		),
	}
}

// incomeAndExpenditureServiceClient implements IncomeAndExpenditureServiceClient.
type incomeAndExpenditureServiceClient struct {
	listIncomeAndExpenditure     *connect_go.Client[proto.ListIncomeAndExpenditureRequest, proto.ListIncomeAndExpenditureResponse]
	getIncomeAndExpenditure      *connect_go.Client[proto.GetIncomeAndExpenditureRequest, proto.GetIncomeAndExpenditureResponse]
	registerIncomeAndExpenditure *connect_go.Client[proto.RegisterIncomeAndExpenditureRequest, proto.RegisterIncomeAndExpenditureResponse]
	updateIncomeAndExpenditure   *connect_go.Client[proto.UpdateIncomeAndExpenditureRequest, proto.UpdateIncomeAndExpenditureResponse]
	deleteIncomeAndExpenditure   *connect_go.Client[proto.DeleteIncomeAndExpenditureRequest, proto.DeleteIncomeAndExpenditureResponse]
}

// ListIncomeAndExpenditure calls proto.IncomeAndExpenditureService.ListIncomeAndExpenditure.
func (c *incomeAndExpenditureServiceClient) ListIncomeAndExpenditure(ctx context.Context, req *connect_go.Request[proto.ListIncomeAndExpenditureRequest]) (*connect_go.Response[proto.ListIncomeAndExpenditureResponse], error) {
	return c.listIncomeAndExpenditure.CallUnary(ctx, req)
}

// GetIncomeAndExpenditure calls proto.IncomeAndExpenditureService.GetIncomeAndExpenditure.
func (c *incomeAndExpenditureServiceClient) GetIncomeAndExpenditure(ctx context.Context, req *connect_go.Request[proto.GetIncomeAndExpenditureRequest]) (*connect_go.Response[proto.GetIncomeAndExpenditureResponse], error) {
	return c.getIncomeAndExpenditure.CallUnary(ctx, req)
}

// RegisterIncomeAndExpenditure calls
// proto.IncomeAndExpenditureService.RegisterIncomeAndExpenditure.
func (c *incomeAndExpenditureServiceClient) RegisterIncomeAndExpenditure(ctx context.Context, req *connect_go.Request[proto.RegisterIncomeAndExpenditureRequest]) (*connect_go.Response[proto.RegisterIncomeAndExpenditureResponse], error) {
	return c.registerIncomeAndExpenditure.CallUnary(ctx, req)
}

// UpdateIncomeAndExpenditure calls proto.IncomeAndExpenditureService.UpdateIncomeAndExpenditure.
func (c *incomeAndExpenditureServiceClient) UpdateIncomeAndExpenditure(ctx context.Context, req *connect_go.Request[proto.UpdateIncomeAndExpenditureRequest]) (*connect_go.Response[proto.UpdateIncomeAndExpenditureResponse], error) {
	return c.updateIncomeAndExpenditure.CallUnary(ctx, req)
}

// DeleteIncomeAndExpenditure calls proto.IncomeAndExpenditureService.DeleteIncomeAndExpenditure.
func (c *incomeAndExpenditureServiceClient) DeleteIncomeAndExpenditure(ctx context.Context, req *connect_go.Request[proto.DeleteIncomeAndExpenditureRequest]) (*connect_go.Response[proto.DeleteIncomeAndExpenditureResponse], error) {
	return c.deleteIncomeAndExpenditure.CallUnary(ctx, req)
}

// IncomeAndExpenditureServiceHandler is an implementation of the proto.IncomeAndExpenditureService
// service.
type IncomeAndExpenditureServiceHandler interface {
	ListIncomeAndExpenditure(context.Context, *connect_go.Request[proto.ListIncomeAndExpenditureRequest]) (*connect_go.Response[proto.ListIncomeAndExpenditureResponse], error)
	GetIncomeAndExpenditure(context.Context, *connect_go.Request[proto.GetIncomeAndExpenditureRequest]) (*connect_go.Response[proto.GetIncomeAndExpenditureResponse], error)
	RegisterIncomeAndExpenditure(context.Context, *connect_go.Request[proto.RegisterIncomeAndExpenditureRequest]) (*connect_go.Response[proto.RegisterIncomeAndExpenditureResponse], error)
	UpdateIncomeAndExpenditure(context.Context, *connect_go.Request[proto.UpdateIncomeAndExpenditureRequest]) (*connect_go.Response[proto.UpdateIncomeAndExpenditureResponse], error)
	DeleteIncomeAndExpenditure(context.Context, *connect_go.Request[proto.DeleteIncomeAndExpenditureRequest]) (*connect_go.Response[proto.DeleteIncomeAndExpenditureResponse], error)
}

// NewIncomeAndExpenditureServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIncomeAndExpenditureServiceHandler(svc IncomeAndExpenditureServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/proto.IncomeAndExpenditureService/ListIncomeAndExpenditure", connect_go.NewUnaryHandler(
		"/proto.IncomeAndExpenditureService/ListIncomeAndExpenditure",
		svc.ListIncomeAndExpenditure,
		opts...,
	))
	mux.Handle("/proto.IncomeAndExpenditureService/GetIncomeAndExpenditure", connect_go.NewUnaryHandler(
		"/proto.IncomeAndExpenditureService/GetIncomeAndExpenditure",
		svc.GetIncomeAndExpenditure,
		opts...,
	))
	mux.Handle("/proto.IncomeAndExpenditureService/RegisterIncomeAndExpenditure", connect_go.NewUnaryHandler(
		"/proto.IncomeAndExpenditureService/RegisterIncomeAndExpenditure",
		svc.RegisterIncomeAndExpenditure,
		opts...,
	))
	mux.Handle("/proto.IncomeAndExpenditureService/UpdateIncomeAndExpenditure", connect_go.NewUnaryHandler(
		"/proto.IncomeAndExpenditureService/UpdateIncomeAndExpenditure",
		svc.UpdateIncomeAndExpenditure,
		opts...,
	))
	mux.Handle("/proto.IncomeAndExpenditureService/DeleteIncomeAndExpenditure", connect_go.NewUnaryHandler(
		"/proto.IncomeAndExpenditureService/DeleteIncomeAndExpenditure",
		svc.DeleteIncomeAndExpenditure,
		opts...,
	))
	return "/proto.IncomeAndExpenditureService/", mux
}

// UnimplementedIncomeAndExpenditureServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIncomeAndExpenditureServiceHandler struct{}

func (UnimplementedIncomeAndExpenditureServiceHandler) ListIncomeAndExpenditure(context.Context, *connect_go.Request[proto.ListIncomeAndExpenditureRequest]) (*connect_go.Response[proto.ListIncomeAndExpenditureResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.IncomeAndExpenditureService.ListIncomeAndExpenditure is not implemented"))
}

func (UnimplementedIncomeAndExpenditureServiceHandler) GetIncomeAndExpenditure(context.Context, *connect_go.Request[proto.GetIncomeAndExpenditureRequest]) (*connect_go.Response[proto.GetIncomeAndExpenditureResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.IncomeAndExpenditureService.GetIncomeAndExpenditure is not implemented"))
}

func (UnimplementedIncomeAndExpenditureServiceHandler) RegisterIncomeAndExpenditure(context.Context, *connect_go.Request[proto.RegisterIncomeAndExpenditureRequest]) (*connect_go.Response[proto.RegisterIncomeAndExpenditureResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.IncomeAndExpenditureService.RegisterIncomeAndExpenditure is not implemented"))
}

func (UnimplementedIncomeAndExpenditureServiceHandler) UpdateIncomeAndExpenditure(context.Context, *connect_go.Request[proto.UpdateIncomeAndExpenditureRequest]) (*connect_go.Response[proto.UpdateIncomeAndExpenditureResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.IncomeAndExpenditureService.UpdateIncomeAndExpenditure is not implemented"))
}

func (UnimplementedIncomeAndExpenditureServiceHandler) DeleteIncomeAndExpenditure(context.Context, *connect_go.Request[proto.DeleteIncomeAndExpenditureRequest]) (*connect_go.Response[proto.DeleteIncomeAndExpenditureResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.IncomeAndExpenditureService.DeleteIncomeAndExpenditure is not implemented"))
}
