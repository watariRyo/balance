// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: group.proto

package protoconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	proto "github.com/watariRyo/balance/server/proto"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// GroupServiceName is the fully-qualified name of the GroupService service.
	GroupServiceName = "proto.GroupService"
)

// GroupServiceClient is a client for the proto.GroupService service.
type GroupServiceClient interface {
	ListGroup(context.Context, *connect_go.Request[proto.ListGroupRequest]) (*connect_go.Response[proto.ListGroupResponse], error)
	GetGroup(context.Context, *connect_go.Request[proto.GetGroupRequest]) (*connect_go.Response[proto.GetGroupResponse], error)
	RegisterGroup(context.Context, *connect_go.Request[proto.RegisterGroupRequest]) (*connect_go.Response[proto.RegisterGroupResponse], error)
	UpdateGroup(context.Context, *connect_go.Request[proto.UpdateGroupRequest]) (*connect_go.Response[proto.UpdateGroupResponse], error)
	DeleteGroup(context.Context, *connect_go.Request[proto.DeleteGroupRequest]) (*connect_go.Response[proto.DeleteGroupResponse], error)
}

// NewGroupServiceClient constructs a client for the proto.GroupService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGroupServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) GroupServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &groupServiceClient{
		listGroup: connect_go.NewClient[proto.ListGroupRequest, proto.ListGroupResponse](
			httpClient,
			baseURL+"/proto.GroupService/ListGroup",
			opts...,
		),
		getGroup: connect_go.NewClient[proto.GetGroupRequest, proto.GetGroupResponse](
			httpClient,
			baseURL+"/proto.GroupService/GetGroup",
			opts...,
		),
		registerGroup: connect_go.NewClient[proto.RegisterGroupRequest, proto.RegisterGroupResponse](
			httpClient,
			baseURL+"/proto.GroupService/RegisterGroup",
			opts...,
		),
		updateGroup: connect_go.NewClient[proto.UpdateGroupRequest, proto.UpdateGroupResponse](
			httpClient,
			baseURL+"/proto.GroupService/UpdateGroup",
			opts...,
		),
		deleteGroup: connect_go.NewClient[proto.DeleteGroupRequest, proto.DeleteGroupResponse](
			httpClient,
			baseURL+"/proto.GroupService/DeleteGroup",
			opts...,
		),
	}
}

// groupServiceClient implements GroupServiceClient.
type groupServiceClient struct {
	listGroup     *connect_go.Client[proto.ListGroupRequest, proto.ListGroupResponse]
	getGroup      *connect_go.Client[proto.GetGroupRequest, proto.GetGroupResponse]
	registerGroup *connect_go.Client[proto.RegisterGroupRequest, proto.RegisterGroupResponse]
	updateGroup   *connect_go.Client[proto.UpdateGroupRequest, proto.UpdateGroupResponse]
	deleteGroup   *connect_go.Client[proto.DeleteGroupRequest, proto.DeleteGroupResponse]
}

// ListGroup calls proto.GroupService.ListGroup.
func (c *groupServiceClient) ListGroup(ctx context.Context, req *connect_go.Request[proto.ListGroupRequest]) (*connect_go.Response[proto.ListGroupResponse], error) {
	return c.listGroup.CallUnary(ctx, req)
}

// GetGroup calls proto.GroupService.GetGroup.
func (c *groupServiceClient) GetGroup(ctx context.Context, req *connect_go.Request[proto.GetGroupRequest]) (*connect_go.Response[proto.GetGroupResponse], error) {
	return c.getGroup.CallUnary(ctx, req)
}

// RegisterGroup calls proto.GroupService.RegisterGroup.
func (c *groupServiceClient) RegisterGroup(ctx context.Context, req *connect_go.Request[proto.RegisterGroupRequest]) (*connect_go.Response[proto.RegisterGroupResponse], error) {
	return c.registerGroup.CallUnary(ctx, req)
}

// UpdateGroup calls proto.GroupService.UpdateGroup.
func (c *groupServiceClient) UpdateGroup(ctx context.Context, req *connect_go.Request[proto.UpdateGroupRequest]) (*connect_go.Response[proto.UpdateGroupResponse], error) {
	return c.updateGroup.CallUnary(ctx, req)
}

// DeleteGroup calls proto.GroupService.DeleteGroup.
func (c *groupServiceClient) DeleteGroup(ctx context.Context, req *connect_go.Request[proto.DeleteGroupRequest]) (*connect_go.Response[proto.DeleteGroupResponse], error) {
	return c.deleteGroup.CallUnary(ctx, req)
}

// GroupServiceHandler is an implementation of the proto.GroupService service.
type GroupServiceHandler interface {
	ListGroup(context.Context, *connect_go.Request[proto.ListGroupRequest]) (*connect_go.Response[proto.ListGroupResponse], error)
	GetGroup(context.Context, *connect_go.Request[proto.GetGroupRequest]) (*connect_go.Response[proto.GetGroupResponse], error)
	RegisterGroup(context.Context, *connect_go.Request[proto.RegisterGroupRequest]) (*connect_go.Response[proto.RegisterGroupResponse], error)
	UpdateGroup(context.Context, *connect_go.Request[proto.UpdateGroupRequest]) (*connect_go.Response[proto.UpdateGroupResponse], error)
	DeleteGroup(context.Context, *connect_go.Request[proto.DeleteGroupRequest]) (*connect_go.Response[proto.DeleteGroupResponse], error)
}

// NewGroupServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGroupServiceHandler(svc GroupServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/proto.GroupService/ListGroup", connect_go.NewUnaryHandler(
		"/proto.GroupService/ListGroup",
		svc.ListGroup,
		opts...,
	))
	mux.Handle("/proto.GroupService/GetGroup", connect_go.NewUnaryHandler(
		"/proto.GroupService/GetGroup",
		svc.GetGroup,
		opts...,
	))
	mux.Handle("/proto.GroupService/RegisterGroup", connect_go.NewUnaryHandler(
		"/proto.GroupService/RegisterGroup",
		svc.RegisterGroup,
		opts...,
	))
	mux.Handle("/proto.GroupService/UpdateGroup", connect_go.NewUnaryHandler(
		"/proto.GroupService/UpdateGroup",
		svc.UpdateGroup,
		opts...,
	))
	mux.Handle("/proto.GroupService/DeleteGroup", connect_go.NewUnaryHandler(
		"/proto.GroupService/DeleteGroup",
		svc.DeleteGroup,
		opts...,
	))
	return "/proto.GroupService/", mux
}

// UnimplementedGroupServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGroupServiceHandler struct{}

func (UnimplementedGroupServiceHandler) ListGroup(context.Context, *connect_go.Request[proto.ListGroupRequest]) (*connect_go.Response[proto.ListGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.GroupService.ListGroup is not implemented"))
}

func (UnimplementedGroupServiceHandler) GetGroup(context.Context, *connect_go.Request[proto.GetGroupRequest]) (*connect_go.Response[proto.GetGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.GroupService.GetGroup is not implemented"))
}

func (UnimplementedGroupServiceHandler) RegisterGroup(context.Context, *connect_go.Request[proto.RegisterGroupRequest]) (*connect_go.Response[proto.RegisterGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.GroupService.RegisterGroup is not implemented"))
}

func (UnimplementedGroupServiceHandler) UpdateGroup(context.Context, *connect_go.Request[proto.UpdateGroupRequest]) (*connect_go.Response[proto.UpdateGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.GroupService.UpdateGroup is not implemented"))
}

func (UnimplementedGroupServiceHandler) DeleteGroup(context.Context, *connect_go.Request[proto.DeleteGroupRequest]) (*connect_go.Response[proto.DeleteGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.GroupService.DeleteGroup is not implemented"))
}
