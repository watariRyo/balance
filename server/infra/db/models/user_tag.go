// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserTag is an object representing the database table.
type UserTag struct { // ID
	ID int64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	// ユーザーID
	UserID string `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	// タグ名
	TagName string `boil:"tag_name" json:"tag_name" toml:"tag_name" yaml:"tag_name"`
	// グループID
	GroupID null.Int64 `boil:"group_id" json:"group_id,omitempty" toml:"group_id" yaml:"group_id,omitempty"`
	// 付与制限
	GrantLimit string `boil:"grant_limit" json:"grant_limit" toml:"grant_limit" yaml:"grant_limit"`
	// 作成日時
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// 更新日時
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *userTagR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userTagL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserTagColumns = struct {
	ID         string
	UserID     string
	TagName    string
	GroupID    string
	GrantLimit string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "id",
	UserID:     "user_id",
	TagName:    "tag_name",
	GroupID:    "group_id",
	GrantLimit: "grant_limit",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

var UserTagTableColumns = struct {
	ID         string
	UserID     string
	TagName    string
	GroupID    string
	GrantLimit string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "user_tag.id",
	UserID:     "user_tag.user_id",
	TagName:    "user_tag.tag_name",
	GroupID:    "user_tag.group_id",
	GrantLimit: "user_tag.grant_limit",
	CreatedAt:  "user_tag.created_at",
	UpdatedAt:  "user_tag.updated_at",
}

// Generated where

var UserTagWhere = struct {
	ID         whereHelperint64
	UserID     whereHelperstring
	TagName    whereHelperstring
	GroupID    whereHelpernull_Int64
	GrantLimit whereHelperstring
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
}{
	ID:         whereHelperint64{field: "`user_tag`.`id`"},
	UserID:     whereHelperstring{field: "`user_tag`.`user_id`"},
	TagName:    whereHelperstring{field: "`user_tag`.`tag_name`"},
	GroupID:    whereHelpernull_Int64{field: "`user_tag`.`group_id`"},
	GrantLimit: whereHelperstring{field: "`user_tag`.`grant_limit`"},
	CreatedAt:  whereHelpertime_Time{field: "`user_tag`.`created_at`"},
	UpdatedAt:  whereHelpertime_Time{field: "`user_tag`.`updated_at`"},
}

// UserTagRels is where relationship names are stored.
var UserTagRels = struct {
	Group                 string
	User                  string
	IncomeAndExpenditures string
}{
	Group:                 "Group",
	User:                  "User",
	IncomeAndExpenditures: "IncomeAndExpenditures",
}

// userTagR is where relationships are stored.
type userTagR struct {
	Group                 *TagGroup                 `boil:"Group" json:"Group" toml:"Group" yaml:"Group"`
	User                  *User                     `boil:"User" json:"User" toml:"User" yaml:"User"`
	IncomeAndExpenditures IncomeAndExpenditureSlice `boil:"IncomeAndExpenditures" json:"IncomeAndExpenditures" toml:"IncomeAndExpenditures" yaml:"IncomeAndExpenditures"`
}

// NewStruct creates a new relationship struct
func (*userTagR) NewStruct() *userTagR {
	return &userTagR{}
}

func (r *userTagR) GetGroup() *TagGroup {
	if r == nil {
		return nil
	}
	return r.Group
}

func (r *userTagR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *userTagR) GetIncomeAndExpenditures() IncomeAndExpenditureSlice {
	if r == nil {
		return nil
	}
	return r.IncomeAndExpenditures
}

// userTagL is where Load methods for each relationship are stored.
type userTagL struct{}

var (
	userTagAllColumns            = []string{"id", "user_id", "tag_name", "group_id", "grant_limit", "created_at", "updated_at"}
	userTagColumnsWithoutDefault = []string{"user_id", "tag_name", "group_id", "grant_limit", "created_at", "updated_at"}
	userTagColumnsWithDefault    = []string{"id"}
	userTagPrimaryKeyColumns     = []string{"id"}
	userTagGeneratedColumns      = []string{}
)

type (
	// UserTagSlice is an alias for a slice of pointers to UserTag.
	// This should almost always be used instead of []UserTag.
	UserTagSlice []*UserTag
	// UserTagHook is the signature for custom UserTag hook methods
	UserTagHook func(context.Context, boil.ContextExecutor, *UserTag) error

	userTagQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userTagType                 = reflect.TypeOf(&UserTag{})
	userTagMapping              = queries.MakeStructMapping(userTagType)
	userTagPrimaryKeyMapping, _ = queries.BindMapping(userTagType, userTagMapping, userTagPrimaryKeyColumns)
	userTagInsertCacheMut       sync.RWMutex
	userTagInsertCache          = make(map[string]insertCache)
	userTagUpdateCacheMut       sync.RWMutex
	userTagUpdateCache          = make(map[string]updateCache)
	userTagUpsertCacheMut       sync.RWMutex
	userTagUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userTagAfterSelectHooks []UserTagHook

var userTagBeforeInsertHooks []UserTagHook
var userTagAfterInsertHooks []UserTagHook

var userTagBeforeUpdateHooks []UserTagHook
var userTagAfterUpdateHooks []UserTagHook

var userTagBeforeDeleteHooks []UserTagHook
var userTagAfterDeleteHooks []UserTagHook

var userTagBeforeUpsertHooks []UserTagHook
var userTagAfterUpsertHooks []UserTagHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserTag) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTagAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserTag) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTagBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserTag) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTagAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserTag) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTagBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserTag) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTagAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserTag) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTagBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserTag) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTagAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserTag) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTagBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserTag) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userTagAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserTagHook registers your hook function for all future operations.
func AddUserTagHook(hookPoint boil.HookPoint, userTagHook UserTagHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userTagAfterSelectHooks = append(userTagAfterSelectHooks, userTagHook)
	case boil.BeforeInsertHook:
		userTagBeforeInsertHooks = append(userTagBeforeInsertHooks, userTagHook)
	case boil.AfterInsertHook:
		userTagAfterInsertHooks = append(userTagAfterInsertHooks, userTagHook)
	case boil.BeforeUpdateHook:
		userTagBeforeUpdateHooks = append(userTagBeforeUpdateHooks, userTagHook)
	case boil.AfterUpdateHook:
		userTagAfterUpdateHooks = append(userTagAfterUpdateHooks, userTagHook)
	case boil.BeforeDeleteHook:
		userTagBeforeDeleteHooks = append(userTagBeforeDeleteHooks, userTagHook)
	case boil.AfterDeleteHook:
		userTagAfterDeleteHooks = append(userTagAfterDeleteHooks, userTagHook)
	case boil.BeforeUpsertHook:
		userTagBeforeUpsertHooks = append(userTagBeforeUpsertHooks, userTagHook)
	case boil.AfterUpsertHook:
		userTagAfterUpsertHooks = append(userTagAfterUpsertHooks, userTagHook)
	}
}

// One returns a single userTag record from the query.
func (q userTagQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserTag, error) {
	o := &UserTag{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_tag")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserTag records from the query.
func (q userTagQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserTagSlice, error) {
	var o []*UserTag

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserTag slice")
	}

	if len(userTagAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserTag records in the query.
func (q userTagQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_tag rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userTagQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_tag exists")
	}

	return count > 0, nil
}

// Group pointed to by the foreign key.
func (o *UserTag) Group(mods ...qm.QueryMod) tagGroupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.GroupID),
	}

	queryMods = append(queryMods, mods...)

	return TagGroups(queryMods...)
}

// User pointed to by the foreign key.
func (o *UserTag) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`user_id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// IncomeAndExpenditures retrieves all the income_and_expenditure's IncomeAndExpenditures with an executor.
func (o *UserTag) IncomeAndExpenditures(mods ...qm.QueryMod) incomeAndExpenditureQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`income_and_expenditure`.`user_tag_id`=?", o.ID),
	)

	return IncomeAndExpenditures(queryMods...)
}

// LoadGroup allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userTagL) LoadGroup(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserTag interface{}, mods queries.Applicator) error {
	var slice []*UserTag
	var object *UserTag

	if singular {
		var ok bool
		object, ok = maybeUserTag.(*UserTag)
		if !ok {
			object = new(UserTag)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserTag)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserTag))
			}
		}
	} else {
		s, ok := maybeUserTag.(*[]*UserTag)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserTag)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserTag))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userTagR{}
		}
		if !queries.IsNil(object.GroupID) {
			args = append(args, object.GroupID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userTagR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GroupID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.GroupID) {
				args = append(args, obj.GroupID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tag_group`),
		qm.WhereIn(`tag_group.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TagGroup")
	}

	var resultSlice []*TagGroup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TagGroup")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tag_group")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tag_group")
	}

	if len(tagGroupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Group = foreign
		if foreign.R == nil {
			foreign.R = &tagGroupR{}
		}
		foreign.R.GroupUserTags = append(foreign.R.GroupUserTags, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.GroupID, foreign.ID) {
				local.R.Group = foreign
				if foreign.R == nil {
					foreign.R = &tagGroupR{}
				}
				foreign.R.GroupUserTags = append(foreign.R.GroupUserTags, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userTagL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserTag interface{}, mods queries.Applicator) error {
	var slice []*UserTag
	var object *UserTag

	if singular {
		var ok bool
		object, ok = maybeUserTag.(*UserTag)
		if !ok {
			object = new(UserTag)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserTag)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserTag))
			}
		}
	} else {
		s, ok := maybeUserTag.(*[]*UserTag)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserTag)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserTag))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userTagR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userTagR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserTags = append(foreign.R.UserTags, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.UserID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserTags = append(foreign.R.UserTags, local)
				break
			}
		}
	}

	return nil
}

// LoadIncomeAndExpenditures allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userTagL) LoadIncomeAndExpenditures(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserTag interface{}, mods queries.Applicator) error {
	var slice []*UserTag
	var object *UserTag

	if singular {
		var ok bool
		object, ok = maybeUserTag.(*UserTag)
		if !ok {
			object = new(UserTag)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserTag)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserTag))
			}
		}
	} else {
		s, ok := maybeUserTag.(*[]*UserTag)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserTag)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserTag))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userTagR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userTagR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`income_and_expenditure`),
		qm.WhereIn(`income_and_expenditure.user_tag_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load income_and_expenditure")
	}

	var resultSlice []*IncomeAndExpenditure
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice income_and_expenditure")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on income_and_expenditure")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for income_and_expenditure")
	}

	if len(incomeAndExpenditureAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IncomeAndExpenditures = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &incomeAndExpenditureR{}
			}
			foreign.R.UserTag = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.UserTagID) {
				local.R.IncomeAndExpenditures = append(local.R.IncomeAndExpenditures, foreign)
				if foreign.R == nil {
					foreign.R = &incomeAndExpenditureR{}
				}
				foreign.R.UserTag = local
				break
			}
		}
	}

	return nil
}

// SetGroup of the userTag to the related item.
// Sets o.R.Group to related.
// Adds o to related.R.GroupUserTags.
func (o *UserTag) SetGroup(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TagGroup) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_tag` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"group_id"}),
		strmangle.WhereClause("`", "`", 0, userTagPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.GroupID, related.ID)
	if o.R == nil {
		o.R = &userTagR{
			Group: related,
		}
	} else {
		o.R.Group = related
	}

	if related.R == nil {
		related.R = &tagGroupR{
			GroupUserTags: UserTagSlice{o},
		}
	} else {
		related.R.GroupUserTags = append(related.R.GroupUserTags, o)
	}

	return nil
}

// RemoveGroup relationship.
// Sets o.R.Group to nil.
// Removes o from all passed in related items' relationships struct.
func (o *UserTag) RemoveGroup(ctx context.Context, exec boil.ContextExecutor, related *TagGroup) error {
	var err error

	queries.SetScanner(&o.GroupID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("group_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Group = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.GroupUserTags {
		if queries.Equal(o.GroupID, ri.GroupID) {
			continue
		}

		ln := len(related.R.GroupUserTags)
		if ln > 1 && i < ln-1 {
			related.R.GroupUserTags[i] = related.R.GroupUserTags[ln-1]
		}
		related.R.GroupUserTags = related.R.GroupUserTags[:ln-1]
		break
	}
	return nil
}

// SetUser of the userTag to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserTags.
func (o *UserTag) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_tag` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, userTagPrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.UserID
	if o.R == nil {
		o.R = &userTagR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserTags: UserTagSlice{o},
		}
	} else {
		related.R.UserTags = append(related.R.UserTags, o)
	}

	return nil
}

// AddIncomeAndExpenditures adds the given related objects to the existing relationships
// of the user_tag, optionally inserting them as new records.
// Appends related to o.R.IncomeAndExpenditures.
// Sets related.R.UserTag appropriately.
func (o *UserTag) AddIncomeAndExpenditures(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*IncomeAndExpenditure) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.UserTagID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `income_and_expenditure` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"user_tag_id"}),
				strmangle.WhereClause("`", "`", 0, incomeAndExpenditurePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.UserTagID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userTagR{
			IncomeAndExpenditures: related,
		}
	} else {
		o.R.IncomeAndExpenditures = append(o.R.IncomeAndExpenditures, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &incomeAndExpenditureR{
				UserTag: o,
			}
		} else {
			rel.R.UserTag = o
		}
	}
	return nil
}

// SetIncomeAndExpenditures removes all previously related items of the
// user_tag replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.UserTag's IncomeAndExpenditures accordingly.
// Replaces o.R.IncomeAndExpenditures with related.
// Sets related.R.UserTag's IncomeAndExpenditures accordingly.
func (o *UserTag) SetIncomeAndExpenditures(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*IncomeAndExpenditure) error {
	query := "update `income_and_expenditure` set `user_tag_id` = null where `user_tag_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.IncomeAndExpenditures {
			queries.SetScanner(&rel.UserTagID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.UserTag = nil
		}
		o.R.IncomeAndExpenditures = nil
	}

	return o.AddIncomeAndExpenditures(ctx, exec, insert, related...)
}

// RemoveIncomeAndExpenditures relationships from objects passed in.
// Removes related items from R.IncomeAndExpenditures (uses pointer comparison, removal does not keep order)
// Sets related.R.UserTag.
func (o *UserTag) RemoveIncomeAndExpenditures(ctx context.Context, exec boil.ContextExecutor, related ...*IncomeAndExpenditure) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.UserTagID, nil)
		if rel.R != nil {
			rel.R.UserTag = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("user_tag_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.IncomeAndExpenditures {
			if rel != ri {
				continue
			}

			ln := len(o.R.IncomeAndExpenditures)
			if ln > 1 && i < ln-1 {
				o.R.IncomeAndExpenditures[i] = o.R.IncomeAndExpenditures[ln-1]
			}
			o.R.IncomeAndExpenditures = o.R.IncomeAndExpenditures[:ln-1]
			break
		}
	}

	return nil
}

// UserTags retrieves all the records using an executor.
func UserTags(mods ...qm.QueryMod) userTagQuery {
	mods = append(mods, qm.From("`user_tag`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`user_tag`.*"})
	}

	return userTagQuery{q}
}

// FindUserTag retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserTag(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*UserTag, error) {
	userTagObj := &UserTag{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `user_tag` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userTagObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_tag")
	}

	if err = userTagObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userTagObj, err
	}

	return userTagObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserTag) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_tag provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userTagColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userTagInsertCacheMut.RLock()
	cache, cached := userTagInsertCache[key]
	userTagInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userTagAllColumns,
			userTagColumnsWithDefault,
			userTagColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userTagType, userTagMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userTagType, userTagMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `user_tag` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `user_tag` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `user_tag` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userTagPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_tag")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userTagMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_tag")
	}

CacheNoHooks:
	if !cached {
		userTagInsertCacheMut.Lock()
		userTagInsertCache[key] = cache
		userTagInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserTag.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserTag) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userTagUpdateCacheMut.RLock()
	cache, cached := userTagUpdateCache[key]
	userTagUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userTagAllColumns,
			userTagPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_tag, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `user_tag` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userTagPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userTagType, userTagMapping, append(wl, userTagPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_tag row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_tag")
	}

	if !cached {
		userTagUpdateCacheMut.Lock()
		userTagUpdateCache[key] = cache
		userTagUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userTagQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_tag")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_tag")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserTagSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `user_tag` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userTagPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userTag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userTag")
	}
	return rowsAff, nil
}

var mySQLUserTagUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserTag) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_tag provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userTagColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserTagUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userTagUpsertCacheMut.RLock()
	cache, cached := userTagUpsertCache[key]
	userTagUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userTagAllColumns,
			userTagColumnsWithDefault,
			userTagColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userTagAllColumns,
			userTagPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert user_tag, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`user_tag`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `user_tag` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userTagType, userTagMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userTagType, userTagMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for user_tag")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userTagMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userTagType, userTagMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for user_tag")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_tag")
	}

CacheNoHooks:
	if !cached {
		userTagUpsertCacheMut.Lock()
		userTagUpsertCache[key] = cache
		userTagUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserTag record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserTag) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserTag provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userTagPrimaryKeyMapping)
	sql := "DELETE FROM `user_tag` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_tag")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_tag")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userTagQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userTagQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_tag")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_tag")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserTagSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userTagBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `user_tag` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userTagPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userTag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_tag")
	}

	if len(userTagAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserTag) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserTag(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserTagSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserTagSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `user_tag`.* FROM `user_tag` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userTagPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserTagSlice")
	}

	*o = slice

	return nil
}

// UserTagExists checks if the UserTag row exists.
func UserTagExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `user_tag` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_tag exists")
	}

	return exists, nil
}

// Exists checks if the UserTag row exists.
func (o *UserTag) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserTagExists(ctx, exec, o.ID)
}
