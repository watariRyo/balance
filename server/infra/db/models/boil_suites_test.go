// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("AdminTags", testAdminTags)
	t.Run("IncomeAndExpenditures", testIncomeAndExpenditures)
	t.Run("TagGroups", testTagGroups)
	t.Run("Users", testUsers)
	t.Run("UserTags", testUserTags)
}

func TestDelete(t *testing.T) {
	t.Run("AdminTags", testAdminTagsDelete)
	t.Run("IncomeAndExpenditures", testIncomeAndExpendituresDelete)
	t.Run("TagGroups", testTagGroupsDelete)
	t.Run("Users", testUsersDelete)
	t.Run("UserTags", testUserTagsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("AdminTags", testAdminTagsQueryDeleteAll)
	t.Run("IncomeAndExpenditures", testIncomeAndExpendituresQueryDeleteAll)
	t.Run("TagGroups", testTagGroupsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
	t.Run("UserTags", testUserTagsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("AdminTags", testAdminTagsSliceDeleteAll)
	t.Run("IncomeAndExpenditures", testIncomeAndExpendituresSliceDeleteAll)
	t.Run("TagGroups", testTagGroupsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
	t.Run("UserTags", testUserTagsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("AdminTags", testAdminTagsExists)
	t.Run("IncomeAndExpenditures", testIncomeAndExpendituresExists)
	t.Run("TagGroups", testTagGroupsExists)
	t.Run("Users", testUsersExists)
	t.Run("UserTags", testUserTagsExists)
}

func TestFind(t *testing.T) {
	t.Run("AdminTags", testAdminTagsFind)
	t.Run("IncomeAndExpenditures", testIncomeAndExpendituresFind)
	t.Run("TagGroups", testTagGroupsFind)
	t.Run("Users", testUsersFind)
	t.Run("UserTags", testUserTagsFind)
}

func TestBind(t *testing.T) {
	t.Run("AdminTags", testAdminTagsBind)
	t.Run("IncomeAndExpenditures", testIncomeAndExpendituresBind)
	t.Run("TagGroups", testTagGroupsBind)
	t.Run("Users", testUsersBind)
	t.Run("UserTags", testUserTagsBind)
}

func TestOne(t *testing.T) {
	t.Run("AdminTags", testAdminTagsOne)
	t.Run("IncomeAndExpenditures", testIncomeAndExpendituresOne)
	t.Run("TagGroups", testTagGroupsOne)
	t.Run("Users", testUsersOne)
	t.Run("UserTags", testUserTagsOne)
}

func TestAll(t *testing.T) {
	t.Run("AdminTags", testAdminTagsAll)
	t.Run("IncomeAndExpenditures", testIncomeAndExpendituresAll)
	t.Run("TagGroups", testTagGroupsAll)
	t.Run("Users", testUsersAll)
	t.Run("UserTags", testUserTagsAll)
}

func TestCount(t *testing.T) {
	t.Run("AdminTags", testAdminTagsCount)
	t.Run("IncomeAndExpenditures", testIncomeAndExpendituresCount)
	t.Run("TagGroups", testTagGroupsCount)
	t.Run("Users", testUsersCount)
	t.Run("UserTags", testUserTagsCount)
}

func TestHooks(t *testing.T) {
	t.Run("AdminTags", testAdminTagsHooks)
	t.Run("IncomeAndExpenditures", testIncomeAndExpendituresHooks)
	t.Run("TagGroups", testTagGroupsHooks)
	t.Run("Users", testUsersHooks)
	t.Run("UserTags", testUserTagsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("AdminTags", testAdminTagsInsert)
	t.Run("AdminTags", testAdminTagsInsertWhitelist)
	t.Run("IncomeAndExpenditures", testIncomeAndExpendituresInsert)
	t.Run("IncomeAndExpenditures", testIncomeAndExpendituresInsertWhitelist)
	t.Run("TagGroups", testTagGroupsInsert)
	t.Run("TagGroups", testTagGroupsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
	t.Run("UserTags", testUserTagsInsert)
	t.Run("UserTags", testUserTagsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("IncomeAndExpenditureToUserTagUsingUserTag", testIncomeAndExpenditureToOneUserTagUsingUserTag)
	t.Run("IncomeAndExpenditureToUserUsingUser", testIncomeAndExpenditureToOneUserUsingUser)
	t.Run("TagGroupToUserUsingUser", testTagGroupToOneUserUsingUser)
	t.Run("UserTagToTagGroupUsingGroup", testUserTagToOneTagGroupUsingGroup)
	t.Run("UserTagToUserUsingUser", testUserTagToOneUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("TagGroupToGroupUserTags", testTagGroupToManyGroupUserTags)
	t.Run("UserToIncomeAndExpenditures", testUserToManyIncomeAndExpenditures)
	t.Run("UserToTagGroups", testUserToManyTagGroups)
	t.Run("UserToUserTags", testUserToManyUserTags)
	t.Run("UserTagToIncomeAndExpenditures", testUserTagToManyIncomeAndExpenditures)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("IncomeAndExpenditureToUserTagUsingIncomeAndExpenditures", testIncomeAndExpenditureToOneSetOpUserTagUsingUserTag)
	t.Run("IncomeAndExpenditureToUserUsingIncomeAndExpenditures", testIncomeAndExpenditureToOneSetOpUserUsingUser)
	t.Run("TagGroupToUserUsingTagGroups", testTagGroupToOneSetOpUserUsingUser)
	t.Run("UserTagToTagGroupUsingGroupUserTags", testUserTagToOneSetOpTagGroupUsingGroup)
	t.Run("UserTagToUserUsingUserTags", testUserTagToOneSetOpUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("IncomeAndExpenditureToUserTagUsingIncomeAndExpenditures", testIncomeAndExpenditureToOneRemoveOpUserTagUsingUserTag)
	t.Run("UserTagToTagGroupUsingGroupUserTags", testUserTagToOneRemoveOpTagGroupUsingGroup)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("TagGroupToGroupUserTags", testTagGroupToManyAddOpGroupUserTags)
	t.Run("UserToIncomeAndExpenditures", testUserToManyAddOpIncomeAndExpenditures)
	t.Run("UserToTagGroups", testUserToManyAddOpTagGroups)
	t.Run("UserToUserTags", testUserToManyAddOpUserTags)
	t.Run("UserTagToIncomeAndExpenditures", testUserTagToManyAddOpIncomeAndExpenditures)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("TagGroupToGroupUserTags", testTagGroupToManySetOpGroupUserTags)
	t.Run("UserTagToIncomeAndExpenditures", testUserTagToManySetOpIncomeAndExpenditures)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("TagGroupToGroupUserTags", testTagGroupToManyRemoveOpGroupUserTags)
	t.Run("UserTagToIncomeAndExpenditures", testUserTagToManyRemoveOpIncomeAndExpenditures)
}

func TestReload(t *testing.T) {
	t.Run("AdminTags", testAdminTagsReload)
	t.Run("IncomeAndExpenditures", testIncomeAndExpendituresReload)
	t.Run("TagGroups", testTagGroupsReload)
	t.Run("Users", testUsersReload)
	t.Run("UserTags", testUserTagsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("AdminTags", testAdminTagsReloadAll)
	t.Run("IncomeAndExpenditures", testIncomeAndExpendituresReloadAll)
	t.Run("TagGroups", testTagGroupsReloadAll)
	t.Run("Users", testUsersReloadAll)
	t.Run("UserTags", testUserTagsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("AdminTags", testAdminTagsSelect)
	t.Run("IncomeAndExpenditures", testIncomeAndExpendituresSelect)
	t.Run("TagGroups", testTagGroupsSelect)
	t.Run("Users", testUsersSelect)
	t.Run("UserTags", testUserTagsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("AdminTags", testAdminTagsUpdate)
	t.Run("IncomeAndExpenditures", testIncomeAndExpendituresUpdate)
	t.Run("TagGroups", testTagGroupsUpdate)
	t.Run("Users", testUsersUpdate)
	t.Run("UserTags", testUserTagsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("AdminTags", testAdminTagsSliceUpdateAll)
	t.Run("IncomeAndExpenditures", testIncomeAndExpendituresSliceUpdateAll)
	t.Run("TagGroups", testTagGroupsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
	t.Run("UserTags", testUserTagsSliceUpdateAll)
}
