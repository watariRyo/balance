// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testIncomeAndExpenditures(t *testing.T) {
	t.Parallel()

	query := IncomeAndExpenditures()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testIncomeAndExpendituresDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IncomeAndExpenditure{}
	if err = randomize.Struct(seed, o, incomeAndExpenditureDBTypes, true, incomeAndExpenditureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeAndExpenditure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IncomeAndExpenditures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIncomeAndExpendituresQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IncomeAndExpenditure{}
	if err = randomize.Struct(seed, o, incomeAndExpenditureDBTypes, true, incomeAndExpenditureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeAndExpenditure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := IncomeAndExpenditures().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IncomeAndExpenditures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIncomeAndExpendituresSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IncomeAndExpenditure{}
	if err = randomize.Struct(seed, o, incomeAndExpenditureDBTypes, true, incomeAndExpenditureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeAndExpenditure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IncomeAndExpenditureSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IncomeAndExpenditures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIncomeAndExpendituresExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IncomeAndExpenditure{}
	if err = randomize.Struct(seed, o, incomeAndExpenditureDBTypes, true, incomeAndExpenditureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeAndExpenditure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := IncomeAndExpenditureExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if IncomeAndExpenditure exists: %s", err)
	}
	if !e {
		t.Errorf("Expected IncomeAndExpenditureExists to return true, but got false.")
	}
}

func testIncomeAndExpendituresFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IncomeAndExpenditure{}
	if err = randomize.Struct(seed, o, incomeAndExpenditureDBTypes, true, incomeAndExpenditureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeAndExpenditure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	incomeAndExpenditureFound, err := FindIncomeAndExpenditure(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if incomeAndExpenditureFound == nil {
		t.Error("want a record, got nil")
	}
}

func testIncomeAndExpendituresBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IncomeAndExpenditure{}
	if err = randomize.Struct(seed, o, incomeAndExpenditureDBTypes, true, incomeAndExpenditureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeAndExpenditure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = IncomeAndExpenditures().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testIncomeAndExpendituresOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IncomeAndExpenditure{}
	if err = randomize.Struct(seed, o, incomeAndExpenditureDBTypes, true, incomeAndExpenditureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeAndExpenditure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := IncomeAndExpenditures().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testIncomeAndExpendituresAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	incomeAndExpenditureOne := &IncomeAndExpenditure{}
	incomeAndExpenditureTwo := &IncomeAndExpenditure{}
	if err = randomize.Struct(seed, incomeAndExpenditureOne, incomeAndExpenditureDBTypes, false, incomeAndExpenditureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeAndExpenditure struct: %s", err)
	}
	if err = randomize.Struct(seed, incomeAndExpenditureTwo, incomeAndExpenditureDBTypes, false, incomeAndExpenditureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeAndExpenditure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = incomeAndExpenditureOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = incomeAndExpenditureTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := IncomeAndExpenditures().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testIncomeAndExpendituresCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	incomeAndExpenditureOne := &IncomeAndExpenditure{}
	incomeAndExpenditureTwo := &IncomeAndExpenditure{}
	if err = randomize.Struct(seed, incomeAndExpenditureOne, incomeAndExpenditureDBTypes, false, incomeAndExpenditureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeAndExpenditure struct: %s", err)
	}
	if err = randomize.Struct(seed, incomeAndExpenditureTwo, incomeAndExpenditureDBTypes, false, incomeAndExpenditureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeAndExpenditure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = incomeAndExpenditureOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = incomeAndExpenditureTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IncomeAndExpenditures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func incomeAndExpenditureBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *IncomeAndExpenditure) error {
	*o = IncomeAndExpenditure{}
	return nil
}

func incomeAndExpenditureAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *IncomeAndExpenditure) error {
	*o = IncomeAndExpenditure{}
	return nil
}

func incomeAndExpenditureAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *IncomeAndExpenditure) error {
	*o = IncomeAndExpenditure{}
	return nil
}

func incomeAndExpenditureBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *IncomeAndExpenditure) error {
	*o = IncomeAndExpenditure{}
	return nil
}

func incomeAndExpenditureAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *IncomeAndExpenditure) error {
	*o = IncomeAndExpenditure{}
	return nil
}

func incomeAndExpenditureBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *IncomeAndExpenditure) error {
	*o = IncomeAndExpenditure{}
	return nil
}

func incomeAndExpenditureAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *IncomeAndExpenditure) error {
	*o = IncomeAndExpenditure{}
	return nil
}

func incomeAndExpenditureBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *IncomeAndExpenditure) error {
	*o = IncomeAndExpenditure{}
	return nil
}

func incomeAndExpenditureAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *IncomeAndExpenditure) error {
	*o = IncomeAndExpenditure{}
	return nil
}

func testIncomeAndExpendituresHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &IncomeAndExpenditure{}
	o := &IncomeAndExpenditure{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, incomeAndExpenditureDBTypes, false); err != nil {
		t.Errorf("Unable to randomize IncomeAndExpenditure object: %s", err)
	}

	AddIncomeAndExpenditureHook(boil.BeforeInsertHook, incomeAndExpenditureBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	incomeAndExpenditureBeforeInsertHooks = []IncomeAndExpenditureHook{}

	AddIncomeAndExpenditureHook(boil.AfterInsertHook, incomeAndExpenditureAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	incomeAndExpenditureAfterInsertHooks = []IncomeAndExpenditureHook{}

	AddIncomeAndExpenditureHook(boil.AfterSelectHook, incomeAndExpenditureAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	incomeAndExpenditureAfterSelectHooks = []IncomeAndExpenditureHook{}

	AddIncomeAndExpenditureHook(boil.BeforeUpdateHook, incomeAndExpenditureBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	incomeAndExpenditureBeforeUpdateHooks = []IncomeAndExpenditureHook{}

	AddIncomeAndExpenditureHook(boil.AfterUpdateHook, incomeAndExpenditureAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	incomeAndExpenditureAfterUpdateHooks = []IncomeAndExpenditureHook{}

	AddIncomeAndExpenditureHook(boil.BeforeDeleteHook, incomeAndExpenditureBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	incomeAndExpenditureBeforeDeleteHooks = []IncomeAndExpenditureHook{}

	AddIncomeAndExpenditureHook(boil.AfterDeleteHook, incomeAndExpenditureAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	incomeAndExpenditureAfterDeleteHooks = []IncomeAndExpenditureHook{}

	AddIncomeAndExpenditureHook(boil.BeforeUpsertHook, incomeAndExpenditureBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	incomeAndExpenditureBeforeUpsertHooks = []IncomeAndExpenditureHook{}

	AddIncomeAndExpenditureHook(boil.AfterUpsertHook, incomeAndExpenditureAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	incomeAndExpenditureAfterUpsertHooks = []IncomeAndExpenditureHook{}
}

func testIncomeAndExpendituresInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IncomeAndExpenditure{}
	if err = randomize.Struct(seed, o, incomeAndExpenditureDBTypes, true, incomeAndExpenditureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeAndExpenditure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IncomeAndExpenditures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIncomeAndExpendituresInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IncomeAndExpenditure{}
	if err = randomize.Struct(seed, o, incomeAndExpenditureDBTypes, true); err != nil {
		t.Errorf("Unable to randomize IncomeAndExpenditure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(incomeAndExpenditureColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := IncomeAndExpenditures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIncomeAndExpenditureToOneUserTagUsingUserTag(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local IncomeAndExpenditure
	var foreign UserTag

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, incomeAndExpenditureDBTypes, true, incomeAndExpenditureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeAndExpenditure struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userTagDBTypes, false, userTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTag struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UserTagID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UserTag().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserTagHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *UserTag) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := IncomeAndExpenditureSlice{&local}
	if err = local.L.LoadUserTag(ctx, tx, false, (*[]*IncomeAndExpenditure)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserTag == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UserTag = nil
	if err = local.L.LoadUserTag(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserTag == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testIncomeAndExpenditureToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local IncomeAndExpenditure
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, incomeAndExpenditureDBTypes, false, incomeAndExpenditureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeAndExpenditure struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.UserID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UserID != foreign.UserID {
		t.Errorf("want: %v, got %v", foreign.UserID, check.UserID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := IncomeAndExpenditureSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*IncomeAndExpenditure)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testIncomeAndExpenditureToOneSetOpUserTagUsingUserTag(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IncomeAndExpenditure
	var b, c UserTag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, incomeAndExpenditureDBTypes, false, strmangle.SetComplement(incomeAndExpenditurePrimaryKeyColumns, incomeAndExpenditureColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userTagDBTypes, false, strmangle.SetComplement(userTagPrimaryKeyColumns, userTagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userTagDBTypes, false, strmangle.SetComplement(userTagPrimaryKeyColumns, userTagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UserTag{&b, &c} {
		err = a.SetUserTag(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UserTag != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IncomeAndExpenditures[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UserTagID, x.ID) {
			t.Error("foreign key was wrong value", a.UserTagID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserTagID))
		reflect.Indirect(reflect.ValueOf(&a.UserTagID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UserTagID, x.ID) {
			t.Error("foreign key was wrong value", a.UserTagID, x.ID)
		}
	}
}

func testIncomeAndExpenditureToOneRemoveOpUserTagUsingUserTag(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IncomeAndExpenditure
	var b UserTag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, incomeAndExpenditureDBTypes, false, strmangle.SetComplement(incomeAndExpenditurePrimaryKeyColumns, incomeAndExpenditureColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userTagDBTypes, false, strmangle.SetComplement(userTagPrimaryKeyColumns, userTagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUserTag(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUserTag(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.UserTag().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.UserTag != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.UserTagID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.IncomeAndExpenditures) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testIncomeAndExpenditureToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IncomeAndExpenditure
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, incomeAndExpenditureDBTypes, false, strmangle.SetComplement(incomeAndExpenditurePrimaryKeyColumns, incomeAndExpenditureColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IncomeAndExpenditures[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.UserID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.UserID {
			t.Error("foreign key was wrong value", a.UserID, x.UserID)
		}
	}
}

func testIncomeAndExpendituresReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IncomeAndExpenditure{}
	if err = randomize.Struct(seed, o, incomeAndExpenditureDBTypes, true, incomeAndExpenditureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeAndExpenditure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIncomeAndExpendituresReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IncomeAndExpenditure{}
	if err = randomize.Struct(seed, o, incomeAndExpenditureDBTypes, true, incomeAndExpenditureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeAndExpenditure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IncomeAndExpenditureSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIncomeAndExpendituresSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IncomeAndExpenditure{}
	if err = randomize.Struct(seed, o, incomeAndExpenditureDBTypes, true, incomeAndExpenditureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeAndExpenditure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := IncomeAndExpenditures().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	incomeAndExpenditureDBTypes = map[string]string{`ID`: `bigint`, `UserID`: `varchar`, `Amount`: `int`, `OccurrenceDate`: `varchar`, `UserTagID`: `bigint`, `Classification`: `varchar`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`}
	_                           = bytes.MinRead
)

func testIncomeAndExpendituresUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(incomeAndExpenditurePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(incomeAndExpenditureAllColumns) == len(incomeAndExpenditurePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &IncomeAndExpenditure{}
	if err = randomize.Struct(seed, o, incomeAndExpenditureDBTypes, true, incomeAndExpenditureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeAndExpenditure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IncomeAndExpenditures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, incomeAndExpenditureDBTypes, true, incomeAndExpenditurePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IncomeAndExpenditure struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testIncomeAndExpendituresSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(incomeAndExpenditureAllColumns) == len(incomeAndExpenditurePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &IncomeAndExpenditure{}
	if err = randomize.Struct(seed, o, incomeAndExpenditureDBTypes, true, incomeAndExpenditureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IncomeAndExpenditure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IncomeAndExpenditures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, incomeAndExpenditureDBTypes, true, incomeAndExpenditurePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IncomeAndExpenditure struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(incomeAndExpenditureAllColumns, incomeAndExpenditurePrimaryKeyColumns) {
		fields = incomeAndExpenditureAllColumns
	} else {
		fields = strmangle.SetComplement(
			incomeAndExpenditureAllColumns,
			incomeAndExpenditurePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := IncomeAndExpenditureSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testIncomeAndExpendituresUpsert(t *testing.T) {
	t.Parallel()

	if len(incomeAndExpenditureAllColumns) == len(incomeAndExpenditurePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLIncomeAndExpenditureUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := IncomeAndExpenditure{}
	if err = randomize.Struct(seed, &o, incomeAndExpenditureDBTypes, false); err != nil {
		t.Errorf("Unable to randomize IncomeAndExpenditure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert IncomeAndExpenditure: %s", err)
	}

	count, err := IncomeAndExpenditures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, incomeAndExpenditureDBTypes, false, incomeAndExpenditurePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IncomeAndExpenditure struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert IncomeAndExpenditure: %s", err)
	}

	count, err = IncomeAndExpenditures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
