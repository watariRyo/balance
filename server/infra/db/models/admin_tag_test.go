// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAdminTags(t *testing.T) {
	t.Parallel()

	query := AdminTags()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAdminTagsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AdminTag{}
	if err = randomize.Struct(seed, o, adminTagDBTypes, true, adminTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdminTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AdminTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAdminTagsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AdminTag{}
	if err = randomize.Struct(seed, o, adminTagDBTypes, true, adminTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdminTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AdminTags().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AdminTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAdminTagsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AdminTag{}
	if err = randomize.Struct(seed, o, adminTagDBTypes, true, adminTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdminTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AdminTagSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AdminTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAdminTagsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AdminTag{}
	if err = randomize.Struct(seed, o, adminTagDBTypes, true, adminTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdminTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AdminTagExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AdminTag exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AdminTagExists to return true, but got false.")
	}
}

func testAdminTagsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AdminTag{}
	if err = randomize.Struct(seed, o, adminTagDBTypes, true, adminTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdminTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	adminTagFound, err := FindAdminTag(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if adminTagFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAdminTagsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AdminTag{}
	if err = randomize.Struct(seed, o, adminTagDBTypes, true, adminTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdminTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AdminTags().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAdminTagsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AdminTag{}
	if err = randomize.Struct(seed, o, adminTagDBTypes, true, adminTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdminTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AdminTags().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAdminTagsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	adminTagOne := &AdminTag{}
	adminTagTwo := &AdminTag{}
	if err = randomize.Struct(seed, adminTagOne, adminTagDBTypes, false, adminTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdminTag struct: %s", err)
	}
	if err = randomize.Struct(seed, adminTagTwo, adminTagDBTypes, false, adminTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdminTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = adminTagOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = adminTagTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AdminTags().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAdminTagsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	adminTagOne := &AdminTag{}
	adminTagTwo := &AdminTag{}
	if err = randomize.Struct(seed, adminTagOne, adminTagDBTypes, false, adminTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdminTag struct: %s", err)
	}
	if err = randomize.Struct(seed, adminTagTwo, adminTagDBTypes, false, adminTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdminTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = adminTagOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = adminTagTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AdminTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func adminTagBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AdminTag) error {
	*o = AdminTag{}
	return nil
}

func adminTagAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AdminTag) error {
	*o = AdminTag{}
	return nil
}

func adminTagAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AdminTag) error {
	*o = AdminTag{}
	return nil
}

func adminTagBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AdminTag) error {
	*o = AdminTag{}
	return nil
}

func adminTagAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AdminTag) error {
	*o = AdminTag{}
	return nil
}

func adminTagBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AdminTag) error {
	*o = AdminTag{}
	return nil
}

func adminTagAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AdminTag) error {
	*o = AdminTag{}
	return nil
}

func adminTagBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AdminTag) error {
	*o = AdminTag{}
	return nil
}

func adminTagAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AdminTag) error {
	*o = AdminTag{}
	return nil
}

func testAdminTagsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AdminTag{}
	o := &AdminTag{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, adminTagDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AdminTag object: %s", err)
	}

	AddAdminTagHook(boil.BeforeInsertHook, adminTagBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	adminTagBeforeInsertHooks = []AdminTagHook{}

	AddAdminTagHook(boil.AfterInsertHook, adminTagAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	adminTagAfterInsertHooks = []AdminTagHook{}

	AddAdminTagHook(boil.AfterSelectHook, adminTagAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	adminTagAfterSelectHooks = []AdminTagHook{}

	AddAdminTagHook(boil.BeforeUpdateHook, adminTagBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	adminTagBeforeUpdateHooks = []AdminTagHook{}

	AddAdminTagHook(boil.AfterUpdateHook, adminTagAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	adminTagAfterUpdateHooks = []AdminTagHook{}

	AddAdminTagHook(boil.BeforeDeleteHook, adminTagBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	adminTagBeforeDeleteHooks = []AdminTagHook{}

	AddAdminTagHook(boil.AfterDeleteHook, adminTagAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	adminTagAfterDeleteHooks = []AdminTagHook{}

	AddAdminTagHook(boil.BeforeUpsertHook, adminTagBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	adminTagBeforeUpsertHooks = []AdminTagHook{}

	AddAdminTagHook(boil.AfterUpsertHook, adminTagAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	adminTagAfterUpsertHooks = []AdminTagHook{}
}

func testAdminTagsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AdminTag{}
	if err = randomize.Struct(seed, o, adminTagDBTypes, true, adminTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdminTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AdminTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAdminTagsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AdminTag{}
	if err = randomize.Struct(seed, o, adminTagDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AdminTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(adminTagColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AdminTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAdminTagsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AdminTag{}
	if err = randomize.Struct(seed, o, adminTagDBTypes, true, adminTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdminTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAdminTagsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AdminTag{}
	if err = randomize.Struct(seed, o, adminTagDBTypes, true, adminTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdminTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AdminTagSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAdminTagsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AdminTag{}
	if err = randomize.Struct(seed, o, adminTagDBTypes, true, adminTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdminTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AdminTags().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	adminTagDBTypes = map[string]string{`ID`: `int`, `TagName`: `varchar`, `GrantLimit`: `varchar`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`}
	_               = bytes.MinRead
)

func testAdminTagsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(adminTagPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(adminTagAllColumns) == len(adminTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AdminTag{}
	if err = randomize.Struct(seed, o, adminTagDBTypes, true, adminTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdminTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AdminTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, adminTagDBTypes, true, adminTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AdminTag struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAdminTagsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(adminTagAllColumns) == len(adminTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AdminTag{}
	if err = randomize.Struct(seed, o, adminTagDBTypes, true, adminTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdminTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AdminTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, adminTagDBTypes, true, adminTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AdminTag struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(adminTagAllColumns, adminTagPrimaryKeyColumns) {
		fields = adminTagAllColumns
	} else {
		fields = strmangle.SetComplement(
			adminTagAllColumns,
			adminTagPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AdminTagSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAdminTagsUpsert(t *testing.T) {
	t.Parallel()

	if len(adminTagAllColumns) == len(adminTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLAdminTagUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AdminTag{}
	if err = randomize.Struct(seed, &o, adminTagDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AdminTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AdminTag: %s", err)
	}

	count, err := AdminTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, adminTagDBTypes, false, adminTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AdminTag struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AdminTag: %s", err)
	}

	count, err = AdminTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
