// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// IncomeAndExpenditure is an object representing the database table.
type IncomeAndExpenditure struct { // ID
	ID int64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	// ユーザーID
	UserID string `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	// 名前
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`
	// 金額
	Amount int `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	// 発生日
	OccurrenceDate string `boil:"occurrence_date" json:"occurrence_date" toml:"occurrence_date" yaml:"occurrence_date"`
	// ユーザータグID
	UserTagID null.Int64 `boil:"user_tag_id" json:"user_tag_id,omitempty" toml:"user_tag_id" yaml:"user_tag_id,omitempty"`
	// 分類
	Classification string `boil:"classification" json:"classification" toml:"classification" yaml:"classification"`
	// 作成日時
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// 更新日時
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *incomeAndExpenditureR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L incomeAndExpenditureL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var IncomeAndExpenditureColumns = struct {
	ID             string
	UserID         string
	Name           string
	Amount         string
	OccurrenceDate string
	UserTagID      string
	Classification string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "id",
	UserID:         "user_id",
	Name:           "name",
	Amount:         "amount",
	OccurrenceDate: "occurrence_date",
	UserTagID:      "user_tag_id",
	Classification: "classification",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
}

var IncomeAndExpenditureTableColumns = struct {
	ID             string
	UserID         string
	Name           string
	Amount         string
	OccurrenceDate string
	UserTagID      string
	Classification string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "income_and_expenditure.id",
	UserID:         "income_and_expenditure.user_id",
	Name:           "income_and_expenditure.name",
	Amount:         "income_and_expenditure.amount",
	OccurrenceDate: "income_and_expenditure.occurrence_date",
	UserTagID:      "income_and_expenditure.user_tag_id",
	Classification: "income_and_expenditure.classification",
	CreatedAt:      "income_and_expenditure.created_at",
	UpdatedAt:      "income_and_expenditure.updated_at",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var IncomeAndExpenditureWhere = struct {
	ID             whereHelperint64
	UserID         whereHelperstring
	Name           whereHelperstring
	Amount         whereHelperint
	OccurrenceDate whereHelperstring
	UserTagID      whereHelpernull_Int64
	Classification whereHelperstring
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
}{
	ID:             whereHelperint64{field: "`income_and_expenditure`.`id`"},
	UserID:         whereHelperstring{field: "`income_and_expenditure`.`user_id`"},
	Name:           whereHelperstring{field: "`income_and_expenditure`.`name`"},
	Amount:         whereHelperint{field: "`income_and_expenditure`.`amount`"},
	OccurrenceDate: whereHelperstring{field: "`income_and_expenditure`.`occurrence_date`"},
	UserTagID:      whereHelpernull_Int64{field: "`income_and_expenditure`.`user_tag_id`"},
	Classification: whereHelperstring{field: "`income_and_expenditure`.`classification`"},
	CreatedAt:      whereHelpertime_Time{field: "`income_and_expenditure`.`created_at`"},
	UpdatedAt:      whereHelpertime_Time{field: "`income_and_expenditure`.`updated_at`"},
}

// IncomeAndExpenditureRels is where relationship names are stored.
var IncomeAndExpenditureRels = struct {
	UserTag string
	User    string
}{
	UserTag: "UserTag",
	User:    "User",
}

// incomeAndExpenditureR is where relationships are stored.
type incomeAndExpenditureR struct {
	UserTag *UserTag `boil:"UserTag" json:"UserTag" toml:"UserTag" yaml:"UserTag"`
	User    *User    `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*incomeAndExpenditureR) NewStruct() *incomeAndExpenditureR {
	return &incomeAndExpenditureR{}
}

func (r *incomeAndExpenditureR) GetUserTag() *UserTag {
	if r == nil {
		return nil
	}
	return r.UserTag
}

func (r *incomeAndExpenditureR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// incomeAndExpenditureL is where Load methods for each relationship are stored.
type incomeAndExpenditureL struct{}

var (
	incomeAndExpenditureAllColumns            = []string{"id", "user_id", "name", "amount", "occurrence_date", "user_tag_id", "classification", "created_at", "updated_at"}
	incomeAndExpenditureColumnsWithoutDefault = []string{"user_id", "name", "amount", "occurrence_date", "user_tag_id", "classification", "created_at", "updated_at"}
	incomeAndExpenditureColumnsWithDefault    = []string{"id"}
	incomeAndExpenditurePrimaryKeyColumns     = []string{"id"}
	incomeAndExpenditureGeneratedColumns      = []string{}
)

type (
	// IncomeAndExpenditureSlice is an alias for a slice of pointers to IncomeAndExpenditure.
	// This should almost always be used instead of []IncomeAndExpenditure.
	IncomeAndExpenditureSlice []*IncomeAndExpenditure
	// IncomeAndExpenditureHook is the signature for custom IncomeAndExpenditure hook methods
	IncomeAndExpenditureHook func(context.Context, boil.ContextExecutor, *IncomeAndExpenditure) error

	incomeAndExpenditureQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	incomeAndExpenditureType                 = reflect.TypeOf(&IncomeAndExpenditure{})
	incomeAndExpenditureMapping              = queries.MakeStructMapping(incomeAndExpenditureType)
	incomeAndExpenditurePrimaryKeyMapping, _ = queries.BindMapping(incomeAndExpenditureType, incomeAndExpenditureMapping, incomeAndExpenditurePrimaryKeyColumns)
	incomeAndExpenditureInsertCacheMut       sync.RWMutex
	incomeAndExpenditureInsertCache          = make(map[string]insertCache)
	incomeAndExpenditureUpdateCacheMut       sync.RWMutex
	incomeAndExpenditureUpdateCache          = make(map[string]updateCache)
	incomeAndExpenditureUpsertCacheMut       sync.RWMutex
	incomeAndExpenditureUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var incomeAndExpenditureAfterSelectHooks []IncomeAndExpenditureHook

var incomeAndExpenditureBeforeInsertHooks []IncomeAndExpenditureHook
var incomeAndExpenditureAfterInsertHooks []IncomeAndExpenditureHook

var incomeAndExpenditureBeforeUpdateHooks []IncomeAndExpenditureHook
var incomeAndExpenditureAfterUpdateHooks []IncomeAndExpenditureHook

var incomeAndExpenditureBeforeDeleteHooks []IncomeAndExpenditureHook
var incomeAndExpenditureAfterDeleteHooks []IncomeAndExpenditureHook

var incomeAndExpenditureBeforeUpsertHooks []IncomeAndExpenditureHook
var incomeAndExpenditureAfterUpsertHooks []IncomeAndExpenditureHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *IncomeAndExpenditure) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range incomeAndExpenditureAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *IncomeAndExpenditure) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range incomeAndExpenditureBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *IncomeAndExpenditure) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range incomeAndExpenditureAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *IncomeAndExpenditure) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range incomeAndExpenditureBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *IncomeAndExpenditure) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range incomeAndExpenditureAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *IncomeAndExpenditure) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range incomeAndExpenditureBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *IncomeAndExpenditure) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range incomeAndExpenditureAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *IncomeAndExpenditure) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range incomeAndExpenditureBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *IncomeAndExpenditure) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range incomeAndExpenditureAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddIncomeAndExpenditureHook registers your hook function for all future operations.
func AddIncomeAndExpenditureHook(hookPoint boil.HookPoint, incomeAndExpenditureHook IncomeAndExpenditureHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		incomeAndExpenditureAfterSelectHooks = append(incomeAndExpenditureAfterSelectHooks, incomeAndExpenditureHook)
	case boil.BeforeInsertHook:
		incomeAndExpenditureBeforeInsertHooks = append(incomeAndExpenditureBeforeInsertHooks, incomeAndExpenditureHook)
	case boil.AfterInsertHook:
		incomeAndExpenditureAfterInsertHooks = append(incomeAndExpenditureAfterInsertHooks, incomeAndExpenditureHook)
	case boil.BeforeUpdateHook:
		incomeAndExpenditureBeforeUpdateHooks = append(incomeAndExpenditureBeforeUpdateHooks, incomeAndExpenditureHook)
	case boil.AfterUpdateHook:
		incomeAndExpenditureAfterUpdateHooks = append(incomeAndExpenditureAfterUpdateHooks, incomeAndExpenditureHook)
	case boil.BeforeDeleteHook:
		incomeAndExpenditureBeforeDeleteHooks = append(incomeAndExpenditureBeforeDeleteHooks, incomeAndExpenditureHook)
	case boil.AfterDeleteHook:
		incomeAndExpenditureAfterDeleteHooks = append(incomeAndExpenditureAfterDeleteHooks, incomeAndExpenditureHook)
	case boil.BeforeUpsertHook:
		incomeAndExpenditureBeforeUpsertHooks = append(incomeAndExpenditureBeforeUpsertHooks, incomeAndExpenditureHook)
	case boil.AfterUpsertHook:
		incomeAndExpenditureAfterUpsertHooks = append(incomeAndExpenditureAfterUpsertHooks, incomeAndExpenditureHook)
	}
}

// One returns a single incomeAndExpenditure record from the query.
func (q incomeAndExpenditureQuery) One(ctx context.Context, exec boil.ContextExecutor) (*IncomeAndExpenditure, error) {
	o := &IncomeAndExpenditure{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for income_and_expenditure")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all IncomeAndExpenditure records from the query.
func (q incomeAndExpenditureQuery) All(ctx context.Context, exec boil.ContextExecutor) (IncomeAndExpenditureSlice, error) {
	var o []*IncomeAndExpenditure

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to IncomeAndExpenditure slice")
	}

	if len(incomeAndExpenditureAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all IncomeAndExpenditure records in the query.
func (q incomeAndExpenditureQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count income_and_expenditure rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q incomeAndExpenditureQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if income_and_expenditure exists")
	}

	return count > 0, nil
}

// UserTag pointed to by the foreign key.
func (o *IncomeAndExpenditure) UserTag(mods ...qm.QueryMod) userTagQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserTagID),
	}

	queryMods = append(queryMods, mods...)

	return UserTags(queryMods...)
}

// User pointed to by the foreign key.
func (o *IncomeAndExpenditure) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`user_id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUserTag allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (incomeAndExpenditureL) LoadUserTag(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIncomeAndExpenditure interface{}, mods queries.Applicator) error {
	var slice []*IncomeAndExpenditure
	var object *IncomeAndExpenditure

	if singular {
		var ok bool
		object, ok = maybeIncomeAndExpenditure.(*IncomeAndExpenditure)
		if !ok {
			object = new(IncomeAndExpenditure)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeIncomeAndExpenditure)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeIncomeAndExpenditure))
			}
		}
	} else {
		s, ok := maybeIncomeAndExpenditure.(*[]*IncomeAndExpenditure)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeIncomeAndExpenditure)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeIncomeAndExpenditure))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &incomeAndExpenditureR{}
		}
		if !queries.IsNil(object.UserTagID) {
			args = append(args, object.UserTagID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &incomeAndExpenditureR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserTagID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UserTagID) {
				args = append(args, obj.UserTagID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_tag`),
		qm.WhereIn(`user_tag.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserTag")
	}

	var resultSlice []*UserTag
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserTag")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_tag")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_tag")
	}

	if len(userTagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserTag = foreign
		if foreign.R == nil {
			foreign.R = &userTagR{}
		}
		foreign.R.IncomeAndExpenditures = append(foreign.R.IncomeAndExpenditures, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserTagID, foreign.ID) {
				local.R.UserTag = foreign
				if foreign.R == nil {
					foreign.R = &userTagR{}
				}
				foreign.R.IncomeAndExpenditures = append(foreign.R.IncomeAndExpenditures, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (incomeAndExpenditureL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIncomeAndExpenditure interface{}, mods queries.Applicator) error {
	var slice []*IncomeAndExpenditure
	var object *IncomeAndExpenditure

	if singular {
		var ok bool
		object, ok = maybeIncomeAndExpenditure.(*IncomeAndExpenditure)
		if !ok {
			object = new(IncomeAndExpenditure)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeIncomeAndExpenditure)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeIncomeAndExpenditure))
			}
		}
	} else {
		s, ok := maybeIncomeAndExpenditure.(*[]*IncomeAndExpenditure)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeIncomeAndExpenditure)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeIncomeAndExpenditure))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &incomeAndExpenditureR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &incomeAndExpenditureR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.IncomeAndExpenditures = append(foreign.R.IncomeAndExpenditures, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.UserID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.IncomeAndExpenditures = append(foreign.R.IncomeAndExpenditures, local)
				break
			}
		}
	}

	return nil
}

// SetUserTag of the incomeAndExpenditure to the related item.
// Sets o.R.UserTag to related.
// Adds o to related.R.IncomeAndExpenditures.
func (o *IncomeAndExpenditure) SetUserTag(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserTag) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `income_and_expenditure` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_tag_id"}),
		strmangle.WhereClause("`", "`", 0, incomeAndExpenditurePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserTagID, related.ID)
	if o.R == nil {
		o.R = &incomeAndExpenditureR{
			UserTag: related,
		}
	} else {
		o.R.UserTag = related
	}

	if related.R == nil {
		related.R = &userTagR{
			IncomeAndExpenditures: IncomeAndExpenditureSlice{o},
		}
	} else {
		related.R.IncomeAndExpenditures = append(related.R.IncomeAndExpenditures, o)
	}

	return nil
}

// RemoveUserTag relationship.
// Sets o.R.UserTag to nil.
// Removes o from all passed in related items' relationships struct.
func (o *IncomeAndExpenditure) RemoveUserTag(ctx context.Context, exec boil.ContextExecutor, related *UserTag) error {
	var err error

	queries.SetScanner(&o.UserTagID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("user_tag_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.UserTag = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.IncomeAndExpenditures {
		if queries.Equal(o.UserTagID, ri.UserTagID) {
			continue
		}

		ln := len(related.R.IncomeAndExpenditures)
		if ln > 1 && i < ln-1 {
			related.R.IncomeAndExpenditures[i] = related.R.IncomeAndExpenditures[ln-1]
		}
		related.R.IncomeAndExpenditures = related.R.IncomeAndExpenditures[:ln-1]
		break
	}
	return nil
}

// SetUser of the incomeAndExpenditure to the related item.
// Sets o.R.User to related.
// Adds o to related.R.IncomeAndExpenditures.
func (o *IncomeAndExpenditure) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `income_and_expenditure` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, incomeAndExpenditurePrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.UserID
	if o.R == nil {
		o.R = &incomeAndExpenditureR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			IncomeAndExpenditures: IncomeAndExpenditureSlice{o},
		}
	} else {
		related.R.IncomeAndExpenditures = append(related.R.IncomeAndExpenditures, o)
	}

	return nil
}

// IncomeAndExpenditures retrieves all the records using an executor.
func IncomeAndExpenditures(mods ...qm.QueryMod) incomeAndExpenditureQuery {
	mods = append(mods, qm.From("`income_and_expenditure`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`income_and_expenditure`.*"})
	}

	return incomeAndExpenditureQuery{q}
}

// FindIncomeAndExpenditure retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindIncomeAndExpenditure(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*IncomeAndExpenditure, error) {
	incomeAndExpenditureObj := &IncomeAndExpenditure{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `income_and_expenditure` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, incomeAndExpenditureObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from income_and_expenditure")
	}

	if err = incomeAndExpenditureObj.doAfterSelectHooks(ctx, exec); err != nil {
		return incomeAndExpenditureObj, err
	}

	return incomeAndExpenditureObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *IncomeAndExpenditure) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no income_and_expenditure provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(incomeAndExpenditureColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	incomeAndExpenditureInsertCacheMut.RLock()
	cache, cached := incomeAndExpenditureInsertCache[key]
	incomeAndExpenditureInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			incomeAndExpenditureAllColumns,
			incomeAndExpenditureColumnsWithDefault,
			incomeAndExpenditureColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(incomeAndExpenditureType, incomeAndExpenditureMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(incomeAndExpenditureType, incomeAndExpenditureMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `income_and_expenditure` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `income_and_expenditure` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `income_and_expenditure` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, incomeAndExpenditurePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into income_and_expenditure")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == incomeAndExpenditureMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for income_and_expenditure")
	}

CacheNoHooks:
	if !cached {
		incomeAndExpenditureInsertCacheMut.Lock()
		incomeAndExpenditureInsertCache[key] = cache
		incomeAndExpenditureInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the IncomeAndExpenditure.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *IncomeAndExpenditure) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	incomeAndExpenditureUpdateCacheMut.RLock()
	cache, cached := incomeAndExpenditureUpdateCache[key]
	incomeAndExpenditureUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			incomeAndExpenditureAllColumns,
			incomeAndExpenditurePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update income_and_expenditure, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `income_and_expenditure` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, incomeAndExpenditurePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(incomeAndExpenditureType, incomeAndExpenditureMapping, append(wl, incomeAndExpenditurePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update income_and_expenditure row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for income_and_expenditure")
	}

	if !cached {
		incomeAndExpenditureUpdateCacheMut.Lock()
		incomeAndExpenditureUpdateCache[key] = cache
		incomeAndExpenditureUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q incomeAndExpenditureQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for income_and_expenditure")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for income_and_expenditure")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o IncomeAndExpenditureSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), incomeAndExpenditurePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `income_and_expenditure` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, incomeAndExpenditurePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in incomeAndExpenditure slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all incomeAndExpenditure")
	}
	return rowsAff, nil
}

var mySQLIncomeAndExpenditureUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *IncomeAndExpenditure) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no income_and_expenditure provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(incomeAndExpenditureColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLIncomeAndExpenditureUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	incomeAndExpenditureUpsertCacheMut.RLock()
	cache, cached := incomeAndExpenditureUpsertCache[key]
	incomeAndExpenditureUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			incomeAndExpenditureAllColumns,
			incomeAndExpenditureColumnsWithDefault,
			incomeAndExpenditureColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			incomeAndExpenditureAllColumns,
			incomeAndExpenditurePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert income_and_expenditure, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`income_and_expenditure`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `income_and_expenditure` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(incomeAndExpenditureType, incomeAndExpenditureMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(incomeAndExpenditureType, incomeAndExpenditureMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for income_and_expenditure")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == incomeAndExpenditureMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(incomeAndExpenditureType, incomeAndExpenditureMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for income_and_expenditure")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for income_and_expenditure")
	}

CacheNoHooks:
	if !cached {
		incomeAndExpenditureUpsertCacheMut.Lock()
		incomeAndExpenditureUpsertCache[key] = cache
		incomeAndExpenditureUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single IncomeAndExpenditure record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *IncomeAndExpenditure) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no IncomeAndExpenditure provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), incomeAndExpenditurePrimaryKeyMapping)
	sql := "DELETE FROM `income_and_expenditure` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from income_and_expenditure")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for income_and_expenditure")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q incomeAndExpenditureQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no incomeAndExpenditureQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from income_and_expenditure")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for income_and_expenditure")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o IncomeAndExpenditureSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(incomeAndExpenditureBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), incomeAndExpenditurePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `income_and_expenditure` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, incomeAndExpenditurePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from incomeAndExpenditure slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for income_and_expenditure")
	}

	if len(incomeAndExpenditureAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *IncomeAndExpenditure) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindIncomeAndExpenditure(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IncomeAndExpenditureSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := IncomeAndExpenditureSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), incomeAndExpenditurePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `income_and_expenditure`.* FROM `income_and_expenditure` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, incomeAndExpenditurePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in IncomeAndExpenditureSlice")
	}

	*o = slice

	return nil
}

// IncomeAndExpenditureExists checks if the IncomeAndExpenditure row exists.
func IncomeAndExpenditureExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `income_and_expenditure` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if income_and_expenditure exists")
	}

	return exists, nil
}

// Exists checks if the IncomeAndExpenditure row exists.
func (o *IncomeAndExpenditure) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return IncomeAndExpenditureExists(ctx, exec, o.ID)
}
