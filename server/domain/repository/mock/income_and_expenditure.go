// Code generated by MockGen. DO NOT EDIT.
// Source: income_and_expenditure.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/watariRyo/balance/server/proto"
)

// MockIncomeAndExpenditureRepository is a mock of IncomeAndExpenditureRepository interface.
type MockIncomeAndExpenditureRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIncomeAndExpenditureRepositoryMockRecorder
}

// MockIncomeAndExpenditureRepositoryMockRecorder is the mock recorder for MockIncomeAndExpenditureRepository.
type MockIncomeAndExpenditureRepositoryMockRecorder struct {
	mock *MockIncomeAndExpenditureRepository
}

// NewMockIncomeAndExpenditureRepository creates a new mock instance.
func NewMockIncomeAndExpenditureRepository(ctrl *gomock.Controller) *MockIncomeAndExpenditureRepository {
	mock := &MockIncomeAndExpenditureRepository{ctrl: ctrl}
	mock.recorder = &MockIncomeAndExpenditureRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIncomeAndExpenditureRepository) EXPECT() *MockIncomeAndExpenditureRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIncomeAndExpenditureRepository) Delete(ctx context.Context, input *proto.IncomeAndExpenditureID) (*proto.IncomeAndExpenditureID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, input)
	ret0, _ := ret[0].(*proto.IncomeAndExpenditureID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockIncomeAndExpenditureRepositoryMockRecorder) Delete(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIncomeAndExpenditureRepository)(nil).Delete), ctx, input)
}

// Get mocks base method.
func (m *MockIncomeAndExpenditureRepository) Get(ctx context.Context, input *proto.IncomeAndExpenditureID) (*proto.IncomeAndExpenditureResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, input)
	ret0, _ := ret[0].(*proto.IncomeAndExpenditureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIncomeAndExpenditureRepositoryMockRecorder) Get(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIncomeAndExpenditureRepository)(nil).Get), ctx, input)
}

// List mocks base method.
func (m *MockIncomeAndExpenditureRepository) List(tx context.Context, input *proto.IncomeAndExpenditureListRequest) (*proto.IncomeAndExpenditureListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", tx, input)
	ret0, _ := ret[0].(*proto.IncomeAndExpenditureListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIncomeAndExpenditureRepositoryMockRecorder) List(tx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIncomeAndExpenditureRepository)(nil).List), tx, input)
}

// Upsert mocks base method.
func (m *MockIncomeAndExpenditureRepository) Upsert(ctx context.Context, input *proto.IncomeAndExpenditureRequest) (*proto.IncomeAndExpenditureResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, input)
	ret0, _ := ret[0].(*proto.IncomeAndExpenditureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upsert indicates an expected call of Upsert.
func (mr *MockIncomeAndExpenditureRepositoryMockRecorder) Upsert(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockIncomeAndExpenditureRepository)(nil).Upsert), ctx, input)
}
