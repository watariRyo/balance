// @generated by protoc-gen-es v1.1.0 with parameter "target=ts"
// @generated from file income_and_expenditure.proto (package proto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message proto.ListIncomeAndExpenditureRequest
 */
export class ListIncomeAndExpenditureRequest extends Message<ListIncomeAndExpenditureRequest> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string occurrence_date = 2;
   */
  occurrenceDate = "";

  /**
   * @generated from field: string classification = 3;
   */
  classification = "";

  constructor(data?: PartialMessage<ListIncomeAndExpenditureRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.ListIncomeAndExpenditureRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "occurrence_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "classification", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListIncomeAndExpenditureRequest {
    return new ListIncomeAndExpenditureRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListIncomeAndExpenditureRequest {
    return new ListIncomeAndExpenditureRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListIncomeAndExpenditureRequest {
    return new ListIncomeAndExpenditureRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListIncomeAndExpenditureRequest | PlainMessage<ListIncomeAndExpenditureRequest> | undefined, b: ListIncomeAndExpenditureRequest | PlainMessage<ListIncomeAndExpenditureRequest> | undefined): boolean {
    return proto3.util.equals(ListIncomeAndExpenditureRequest, a, b);
  }
}

/**
 * @generated from message proto.ListIncomeAndExpenditureResponse
 */
export class ListIncomeAndExpenditureResponse extends Message<ListIncomeAndExpenditureResponse> {
  /**
   * @generated from field: repeated proto.IncomeAndExpenditureResponse income_and_expenditure_list = 1;
   */
  incomeAndExpenditureList: IncomeAndExpenditureResponse[] = [];

  constructor(data?: PartialMessage<ListIncomeAndExpenditureResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.ListIncomeAndExpenditureResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "income_and_expenditure_list", kind: "message", T: IncomeAndExpenditureResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListIncomeAndExpenditureResponse {
    return new ListIncomeAndExpenditureResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListIncomeAndExpenditureResponse {
    return new ListIncomeAndExpenditureResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListIncomeAndExpenditureResponse {
    return new ListIncomeAndExpenditureResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListIncomeAndExpenditureResponse | PlainMessage<ListIncomeAndExpenditureResponse> | undefined, b: ListIncomeAndExpenditureResponse | PlainMessage<ListIncomeAndExpenditureResponse> | undefined): boolean {
    return proto3.util.equals(ListIncomeAndExpenditureResponse, a, b);
  }
}

/**
 * @generated from message proto.IncomeAndExpenditureResponse
 */
export class IncomeAndExpenditureResponse extends Message<IncomeAndExpenditureResponse> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: int32 amount = 3;
   */
  amount = 0;

  /**
   * @generated from field: string occurrence_date = 4;
   */
  occurrenceDate = "";

  /**
   * @generated from field: int64 user_tag_id = 5;
   */
  userTagId = protoInt64.zero;

  /**
   * @generated from field: string classification = 6;
   */
  classification = "";

  constructor(data?: PartialMessage<IncomeAndExpenditureResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.IncomeAndExpenditureResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "occurrence_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "user_tag_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "classification", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IncomeAndExpenditureResponse {
    return new IncomeAndExpenditureResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IncomeAndExpenditureResponse {
    return new IncomeAndExpenditureResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IncomeAndExpenditureResponse {
    return new IncomeAndExpenditureResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IncomeAndExpenditureResponse | PlainMessage<IncomeAndExpenditureResponse> | undefined, b: IncomeAndExpenditureResponse | PlainMessage<IncomeAndExpenditureResponse> | undefined): boolean {
    return proto3.util.equals(IncomeAndExpenditureResponse, a, b);
  }
}

/**
 * @generated from message proto.GetIncomeAndExpenditureRequest
 */
export class GetIncomeAndExpenditureRequest extends Message<GetIncomeAndExpenditureRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  constructor(data?: PartialMessage<GetIncomeAndExpenditureRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.GetIncomeAndExpenditureRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIncomeAndExpenditureRequest {
    return new GetIncomeAndExpenditureRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIncomeAndExpenditureRequest {
    return new GetIncomeAndExpenditureRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIncomeAndExpenditureRequest {
    return new GetIncomeAndExpenditureRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetIncomeAndExpenditureRequest | PlainMessage<GetIncomeAndExpenditureRequest> | undefined, b: GetIncomeAndExpenditureRequest | PlainMessage<GetIncomeAndExpenditureRequest> | undefined): boolean {
    return proto3.util.equals(GetIncomeAndExpenditureRequest, a, b);
  }
}

/**
 * @generated from message proto.GetIncomeAndExpenditureResponse
 */
export class GetIncomeAndExpenditureResponse extends Message<GetIncomeAndExpenditureResponse> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: int32 amount = 3;
   */
  amount = 0;

  /**
   * @generated from field: string occurrence_date = 4;
   */
  occurrenceDate = "";

  /**
   * @generated from field: int64 user_tag_id = 5;
   */
  userTagId = protoInt64.zero;

  /**
   * @generated from field: string classification = 6;
   */
  classification = "";

  constructor(data?: PartialMessage<GetIncomeAndExpenditureResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.GetIncomeAndExpenditureResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "occurrence_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "user_tag_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "classification", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIncomeAndExpenditureResponse {
    return new GetIncomeAndExpenditureResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIncomeAndExpenditureResponse {
    return new GetIncomeAndExpenditureResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIncomeAndExpenditureResponse {
    return new GetIncomeAndExpenditureResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetIncomeAndExpenditureResponse | PlainMessage<GetIncomeAndExpenditureResponse> | undefined, b: GetIncomeAndExpenditureResponse | PlainMessage<GetIncomeAndExpenditureResponse> | undefined): boolean {
    return proto3.util.equals(GetIncomeAndExpenditureResponse, a, b);
  }
}

/**
 * @generated from message proto.RegisterIncomeAndExpenditureRequest
 */
export class RegisterIncomeAndExpenditureRequest extends Message<RegisterIncomeAndExpenditureRequest> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: int32 amount = 2;
   */
  amount = 0;

  /**
   * @generated from field: string occurrence_date = 3;
   */
  occurrenceDate = "";

  /**
   * @generated from field: int64 user_tag_id = 4;
   */
  userTagId = protoInt64.zero;

  /**
   * @generated from field: string classification = 5;
   */
  classification = "";

  constructor(data?: PartialMessage<RegisterIncomeAndExpenditureRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.RegisterIncomeAndExpenditureRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "occurrence_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "user_tag_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "classification", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterIncomeAndExpenditureRequest {
    return new RegisterIncomeAndExpenditureRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterIncomeAndExpenditureRequest {
    return new RegisterIncomeAndExpenditureRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterIncomeAndExpenditureRequest {
    return new RegisterIncomeAndExpenditureRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterIncomeAndExpenditureRequest | PlainMessage<RegisterIncomeAndExpenditureRequest> | undefined, b: RegisterIncomeAndExpenditureRequest | PlainMessage<RegisterIncomeAndExpenditureRequest> | undefined): boolean {
    return proto3.util.equals(RegisterIncomeAndExpenditureRequest, a, b);
  }
}

/**
 * @generated from message proto.RegisterIncomeAndExpenditureResponse
 */
export class RegisterIncomeAndExpenditureResponse extends Message<RegisterIncomeAndExpenditureResponse> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: int32 amount = 3;
   */
  amount = 0;

  /**
   * @generated from field: string occurrence_date = 4;
   */
  occurrenceDate = "";

  /**
   * @generated from field: int64 user_tag_id = 5;
   */
  userTagId = protoInt64.zero;

  /**
   * @generated from field: string classification = 6;
   */
  classification = "";

  constructor(data?: PartialMessage<RegisterIncomeAndExpenditureResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.RegisterIncomeAndExpenditureResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "occurrence_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "user_tag_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "classification", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterIncomeAndExpenditureResponse {
    return new RegisterIncomeAndExpenditureResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterIncomeAndExpenditureResponse {
    return new RegisterIncomeAndExpenditureResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterIncomeAndExpenditureResponse {
    return new RegisterIncomeAndExpenditureResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterIncomeAndExpenditureResponse | PlainMessage<RegisterIncomeAndExpenditureResponse> | undefined, b: RegisterIncomeAndExpenditureResponse | PlainMessage<RegisterIncomeAndExpenditureResponse> | undefined): boolean {
    return proto3.util.equals(RegisterIncomeAndExpenditureResponse, a, b);
  }
}

/**
 * @generated from message proto.UpdateIncomeAndExpenditureRequest
 */
export class UpdateIncomeAndExpenditureRequest extends Message<UpdateIncomeAndExpenditureRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: int32 amount = 3;
   */
  amount = 0;

  /**
   * @generated from field: string occurrence_date = 4;
   */
  occurrenceDate = "";

  /**
   * @generated from field: int64 user_tag_id = 5;
   */
  userTagId = protoInt64.zero;

  /**
   * @generated from field: string classification = 6;
   */
  classification = "";

  constructor(data?: PartialMessage<UpdateIncomeAndExpenditureRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.UpdateIncomeAndExpenditureRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "occurrence_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "user_tag_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "classification", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateIncomeAndExpenditureRequest {
    return new UpdateIncomeAndExpenditureRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateIncomeAndExpenditureRequest {
    return new UpdateIncomeAndExpenditureRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateIncomeAndExpenditureRequest {
    return new UpdateIncomeAndExpenditureRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateIncomeAndExpenditureRequest | PlainMessage<UpdateIncomeAndExpenditureRequest> | undefined, b: UpdateIncomeAndExpenditureRequest | PlainMessage<UpdateIncomeAndExpenditureRequest> | undefined): boolean {
    return proto3.util.equals(UpdateIncomeAndExpenditureRequest, a, b);
  }
}

/**
 * @generated from message proto.UpdateIncomeAndExpenditureResponse
 */
export class UpdateIncomeAndExpenditureResponse extends Message<UpdateIncomeAndExpenditureResponse> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: int32 amount = 3;
   */
  amount = 0;

  /**
   * @generated from field: string occurrence_date = 4;
   */
  occurrenceDate = "";

  /**
   * @generated from field: int64 user_tag_id = 5;
   */
  userTagId = protoInt64.zero;

  /**
   * @generated from field: string classification = 6;
   */
  classification = "";

  constructor(data?: PartialMessage<UpdateIncomeAndExpenditureResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.UpdateIncomeAndExpenditureResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "occurrence_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "user_tag_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "classification", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateIncomeAndExpenditureResponse {
    return new UpdateIncomeAndExpenditureResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateIncomeAndExpenditureResponse {
    return new UpdateIncomeAndExpenditureResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateIncomeAndExpenditureResponse {
    return new UpdateIncomeAndExpenditureResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateIncomeAndExpenditureResponse | PlainMessage<UpdateIncomeAndExpenditureResponse> | undefined, b: UpdateIncomeAndExpenditureResponse | PlainMessage<UpdateIncomeAndExpenditureResponse> | undefined): boolean {
    return proto3.util.equals(UpdateIncomeAndExpenditureResponse, a, b);
  }
}

/**
 * @generated from message proto.DeleteIncomeAndExpenditureRequest
 */
export class DeleteIncomeAndExpenditureRequest extends Message<DeleteIncomeAndExpenditureRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  constructor(data?: PartialMessage<DeleteIncomeAndExpenditureRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.DeleteIncomeAndExpenditureRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteIncomeAndExpenditureRequest {
    return new DeleteIncomeAndExpenditureRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteIncomeAndExpenditureRequest {
    return new DeleteIncomeAndExpenditureRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteIncomeAndExpenditureRequest {
    return new DeleteIncomeAndExpenditureRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteIncomeAndExpenditureRequest | PlainMessage<DeleteIncomeAndExpenditureRequest> | undefined, b: DeleteIncomeAndExpenditureRequest | PlainMessage<DeleteIncomeAndExpenditureRequest> | undefined): boolean {
    return proto3.util.equals(DeleteIncomeAndExpenditureRequest, a, b);
  }
}

/**
 * @generated from message proto.DeleteIncomeAndExpenditureResponse
 */
export class DeleteIncomeAndExpenditureResponse extends Message<DeleteIncomeAndExpenditureResponse> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  constructor(data?: PartialMessage<DeleteIncomeAndExpenditureResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.DeleteIncomeAndExpenditureResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteIncomeAndExpenditureResponse {
    return new DeleteIncomeAndExpenditureResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteIncomeAndExpenditureResponse {
    return new DeleteIncomeAndExpenditureResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteIncomeAndExpenditureResponse {
    return new DeleteIncomeAndExpenditureResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteIncomeAndExpenditureResponse | PlainMessage<DeleteIncomeAndExpenditureResponse> | undefined, b: DeleteIncomeAndExpenditureResponse | PlainMessage<DeleteIncomeAndExpenditureResponse> | undefined): boolean {
    return proto3.util.equals(DeleteIncomeAndExpenditureResponse, a, b);
  }
}

